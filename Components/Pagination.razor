@using Microsoft.AspNetCore.Components

<nav aria-label="Pagination" style="background: none; box-shadow: none;">
    <ul class="pagination d-flex justify-content-center align-items-center mb-0" style="background: none; box-shadow: none;">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)" aria-label="Previous">
                <i class="bi bi-chevron-left" aria-hidden="true"></i>
                <span class="visually-hidden">Previous</span>
            </button>
        </li>
        @foreach (var item in GetPageItems())
        {
            if (item == -1)
            {
                <li class="page-item disabled">
                    <span class="page-link text-secondary" tabindex="-1">&hellip;</span>
                </li>
            }
            else
            {
                var pageNumber = item;
                <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)" aria-current="@(CurrentPage == pageNumber ? "page" : null)">@pageNumber</button>
                </li>
            }
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)" aria-label="Next">
                <i class="bi bi-chevron-right" aria-hidden="true"></i>
                <span class="visually-hidden">Next</span>
            </button>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    /// <summary>
    /// Returns a list of page numbers and -1 for ellipsis, e.g. [1, -1, 4, 5, 6, 7, 8, -1, 10]
    /// If only one page is omitted before the last, show that page instead of ellipsis.
    /// </summary>
    private IEnumerable<int> GetPageItems()
    {
        const int window = 5;
        var items = new List<int>();
        if (TotalPages <= window + 2)
        {
            for (int i = 1; i <= TotalPages; i++)
                items.Add(i);
            return items;
        }
        items.Add(1); // Always show first
        int start = Math.Max(2, CurrentPage - 2);
        int end = Math.Min(TotalPages - 1, CurrentPage + 2);
        if (CurrentPage <= 3)
        {
            start = 2;
            end = 6;
        }
        else if (CurrentPage >= TotalPages - 2)
        {
            start = TotalPages - 5;
            end = TotalPages - 1;
        }
        // Add ellipsis or single page after first
        if (start > 2)
        {
            if (start == 3)
                items.Add(2);
            else
                items.Add(-1);
        }
        for (int i = start; i <= end; i++)
        {
            if (i > 1 && i < TotalPages)
                items.Add(i);
        }
        // Add ellipsis or single page before last
        if (end < TotalPages - 1)
        {
            if (end == TotalPages - 2)
                items.Add(TotalPages - 1);
            else
                items.Add(-1);
        }
        items.Add(TotalPages); // Always show last
        return items;
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages && page != CurrentPage)
        {
            await OnPageChanged.InvokeAsync(page);
        }
    }
} 