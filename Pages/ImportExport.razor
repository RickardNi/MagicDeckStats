@page "/import-export"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@using System.Text.Json
@using Microsoft.JSInterop
@inject IBGStatsImportService BGStatsService
@inject ILogger<ImportExport> Logger
@inject IJSRuntime JS

<PageTitle>Import / Export - Magic Deck Stats</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Import / Export Data</h1>
    
    <div class="row">
        <!-- Import Section -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="bi bi-upload me-2"></span>Import BGStats Data
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="fileInput" class="form-label">Upload BGStats JSON Export</label>
                        <div class="drop-zone @(isDragOver ? "drag-over" : "")" 
                             @ondragover="HandleDragOver"
                             @ondragleave="HandleDragLeave"
                             @ondrop="HandleDrop">
                            <div class="drop-zone-content">
                                <span class="bi bi-cloud-upload fs-1 text-muted"></span>
                                <p class="mt-2 mb-0">Drag and drop your BGStats JSON file here</p>
                                <p class="text-muted small">or use the file input below</p>
                            </div>
                        </div>
                        <div class="mt-3">
                            <InputFile OnChange="HandleFileSelect" accept=".json" class="form-control" />
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(importStatus))
                    {
                        <div class="alert @(importSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                            @importStatus
                            <button type="button" class="btn-close" @onclick="() => importStatus = string.Empty"></button>
                        </div>
                    }
                    
                    @if (importedData != null)
                    {
                        <div class="alert alert-info">
                            <h6>Import Summary:</h6>
                            <ul class="mb-0">
                                <li>Games: @importedData.Games.Count</li>
                                <li>Plays: @importedData.Plays.Count</li>
                                <li>Players: @importedData.Players.Count</li>
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Export Section -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="bi bi-download me-2"></span>Export Current Data
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="exportTextarea" class="form-label">Current Data (JSON)</label>
                        <textarea id="exportTextarea" class="form-control" rows="10" readonly>@exportedJson</textarea>
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" @onclick="CopyToClipboard" disabled="@string.IsNullOrEmpty(exportedJson)">
                            <span class="bi bi-clipboard me-1"></span>Copy to Clipboard
                        </button>
                        <button class="btn btn-secondary" @onclick="RefreshExportData">
                            <span class="bi bi-arrow-clockwise me-1"></span>Refresh
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(copyStatus))
                    {
                        <div class="alert @(copySuccess ? "alert-success" : "alert-danger") alert-dismissible fade show mt-2" role="alert">
                            @copyStatus
                            <button type="button" class="btn-close" @onclick="() => copyStatus = string.Empty"></button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .drop-zone {
        border: 2px dashed #dee2e6;
        border-radius: 0.375rem;
        padding: 2rem;
        text-align: center;
        transition: all 0.2s ease-in-out;
        background-color: #f8f9fa;
    }
    
    .drop-zone:hover {
        border-color: #0d6efd;
        background-color: #f0f8ff;
    }
    
    .drop-zone.drag-over {
        border-color: #0d6efd;
        background-color: #e7f3ff;
        transform: scale(1.02);
    }
    
    .drop-zone-content {
        pointer-events: none;
    }
</style>

@code {
    private bool isDragOver = false;
    private string importStatus = string.Empty;
    private bool importSuccess = false;
    private BGStatsExport? importedData;
    private string exportedJson = string.Empty;
    private string copyStatus = string.Empty;
    private bool copySuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshExportData();
    }

    private void HandleDragOver(DragEventArgs e)
    {
        isDragOver = true;
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        isDragOver = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragOver = false;
        // Note: Drag and drop file handling is complex in Blazor WebAssembly
        // For now, we'll rely on the file input below
    }

    private async Task HandleFileSelect(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.File;
            await ProcessFile(file);
        }
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        try
        {
            importStatus = "Processing file...";
            importSuccess = false;
            StateHasChanged();

            if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                importStatus = "Please select a JSON file.";
                importSuccess = false;
                return;
            }

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            using var reader = new StreamReader(stream);
            var jsonContent = await reader.ReadToEndAsync();

            // Import the data using the service
            var importResult = await BGStatsService.ImportDataAsync(jsonContent);

            if (!importResult)
            {
                importStatus = "Failed to import data. Please ensure it's a valid BGStats export.";
                importSuccess = false;
                return;
            }

            // Get the imported data for display
            importedData = await BGStatsService.GetCurrentDataAsync();

            if (importedData == null)
            {
                importStatus = "Data imported but failed to retrieve for display.";
                importSuccess = false;
                return;
            }

            importStatus = $"Successfully imported data with {importedData.Games.Count} games, {importedData.Plays.Count} plays, and {importedData.Players.Count} players.";
            importSuccess = true;
            
            // Refresh export data to include the newly imported data
            await RefreshExportData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing imported file");
            importStatus = $"Error processing file: {ex.Message}";
            importSuccess = false;
        }
    }

    private async Task RefreshExportData()
    {
        try
        {
            var currentData = await BGStatsService.GetCurrentDataAsync();
            
            if (currentData == null)
            {
                exportedJson = "No data available";
                return;
            }

            var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            exportedJson = JsonSerializer.Serialize(currentData, jsonOptions);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing export data");
            exportedJson = "Error loading data";
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", exportedJson);
            copyStatus = "Data copied to clipboard successfully!";
            copySuccess = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying to clipboard");
            copyStatus = "Failed to copy to clipboard. Please select and copy manually.";
            copySuccess = false;
        }
    }
} 