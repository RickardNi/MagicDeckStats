@page "/import-export"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@using System.Text.Json
@using Microsoft.JSInterop
@inject IBGStatsImportService BGStatsService
@inject ILogger<ImportExport> Logger
@inject IJSRuntime JS

<PageTitle> Magic Deck Stats - Import / Export</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Import / Export Data</h1>

    <div class="row">
        <!-- Import Section -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="bi bi-upload me-2"></span>Import BGStats Data
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="fileInput" class="form-label">Upload BGStats JSON Export</label>
                        <div class="drop-zone @(isDragOver ? "drag-over" : "")"
                             @ondragover="HandleDragOver"
                             @ondragleave="HandleDragLeave"
                             @ondrop="HandleDrop">
                            <div class="drop-zone-content">
                                <span class="bi bi-cloud-upload fs-1 text-muted"></span>
                                <p class="mt-2 mb-0">Drag and drop your BGStats JSON file here</p>
                                <p class="text-muted small">or use the file input below</p>
                            </div>
                        </div>
                        <div class="mt-3">
                            <InputFile OnChange="HandleFileSelect" accept=".json" class="form-control" />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(importStatus))
                    {
                        <div class="alert @(importSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                            @importStatus
                            <button type="button" class="btn-close" @onclick="() => importStatus = string.Empty"></button>
                        </div>
                    }

                    @if (importedData != null)
                    {
                        <div class="alert alert-info">
                            <h6>Import Summary:</h6>
                            <ul class="mb-0">
                                <li>Games: @importedData.Games.Count</li>
                                <li>Plays: @importedData.Plays.Count</li>
                                <li>Players: @importedData.Players.Count</li>
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Export Section -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="bi bi-download me-2"></span>Export Current Data
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Player Name Options</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="noModification" name="nameModification" @onchange="SetNoModification" checked="@(nameModificationOption == "none")">
                            <label class="form-check-label" for="noModification">
                                Keep original names
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="simplifyNames" name="nameModification" @onchange="SetSimplifyNames" checked="@(nameModificationOption == "simplify")">
                            <label class="form-check-label" for="simplifyNames">
                                Simplify names
                            </label>
                            <small class="text-muted d-block ms-4">Example: "Agne Simonsson" becomes "Agne"</small>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="anonymizeNames" name="nameModification" @onchange="SetAnonymizeNames" checked="@(nameModificationOption == "anonymize")">
                            <label class="form-check-label" for="anonymizeNames">
                                Anonymize all names
                            </label>
                            <small class="text-muted d-block ms-4">All names will be replaced with random names</small>
                        </div>
                    </div>

                    @if (nameModificationOption == "anonymize")
                    {
                        <div class="mb-3">
                            <label for="excludePlayerIds" class="form-label">Exclude Player IDs from Anonymization (Optional)</label>
                            <input type="text" id="excludePlayerIds" class="form-control" 
                                   @bind="excludePlayerIds" 
                                   @bind:event="oninput"
                                   @onchange="OnExcludePlayerIdsChanged"
                                   placeholder="Enter player IDs separated by commas (e.g., 1, 3, 5)" />
                            <small class="text-muted">Leave empty to anonymize all players. Enter player IDs separated by commas to keep their original first name.</small>
                        </div>

                        var excludedIds = ParseExcludePlayerIds();
                        if (excludedIds.Any())
                        {
                            <div class="mb-3">
                                <small class="text-warning">
                                    <i class="bi bi-info-circle me-1"></i>
                                    The following players will keep their original first name: 
                                    @string.Join(", ", excludedIds)
                                </small>
                            </div>
                        }
                    }

                    <div class="mb-3">
                        <label for="exportTextarea" class="form-label">Current Data (JSON)</label>
                        <textarea id="exportTextarea" class="form-control export-textarea" readonly>@exportedJson</textarea>
                    </div>

                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" @onclick="CopyToClipboard" disabled="@string.IsNullOrEmpty(exportedJson)">
                            <span class="bi bi-clipboard me-1"></span>Copy to Clipboard
                        </button>
                        <button class="btn btn-secondary" @onclick="RefreshExportData">
                            <span class="bi bi-arrow-clockwise me-1"></span>Refresh
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(copyStatus))
                    {
                        <div class="alert @(copySuccess ? "alert-success" : "alert-danger") alert-dismissible fade show mt-2" role="alert">
                            @copyStatus
                            <button type="button" class="btn-close" @onclick="() => copyStatus = string.Empty"></button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .drop-zone {
        border: 2px dashed #dee2e6;
        border-radius: 0.375rem;
        padding: 2rem;
        text-align: center;
        transition: all 0.2s ease-in-out;
        background-color: #f8f9fa;
    }

        .drop-zone:hover {
            border-color: #0d6efd;
            background-color: #f0f8ff;
        }

        .drop-zone.drag-over {
            border-color: #0d6efd;
            background-color: #e7f3ff;
            transform: scale(1.02);
        }

    .drop-zone-content {
        pointer-events: none;
    }

    .export-textarea {
        min-height: 150px;
        height: 60vh;
        resize: vertical;
    }
</style>

@code {
    private bool isDragOver = false;
    private string importStatus = string.Empty;
    private bool importSuccess = false;
    private BGStatsExport? importedData;
    private string exportedJson = string.Empty;
    private string copyStatus = string.Empty;
    private bool copySuccess = false;
    private string nameModificationOption = "none";
    private string excludePlayerIds = "2, 3, 7, 10, 44, 47, 71";

    protected override async Task OnInitializedAsync()
    {
        await RefreshExportData();
    }

    private void HandleDragOver(DragEventArgs e)
    {
        isDragOver = true;
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        isDragOver = false;
    }

    private void HandleDrop(DragEventArgs e)
    {
        isDragOver = false;
        // Note: Drag and drop file handling is complex in Blazor WebAssembly
        // For now, we'll rely on the file input below
    }

    private async Task HandleFileSelect(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.File;
            await ProcessFile(file);
        }
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        try
        {
            importStatus = "Processing file...";
            importSuccess = false;
            StateHasChanged();

            if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                importStatus = "Please select a JSON file.";
                importSuccess = false;
                return;
            }

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            using var reader = new StreamReader(stream);
            var jsonContent = await reader.ReadToEndAsync();

            // Import the data using the service
            var importResult = await BGStatsService.ImportDataAsync(jsonContent);

            if (!importResult)
            {
                importStatus = "Failed to import data. Please ensure it's a valid BGStats export.";
                importSuccess = false;
                return;
            }

            // Get the imported data for display
            importedData = await BGStatsService.GetCurrentDataAsync();

            if (importedData == null)
            {
                importStatus = "Data imported but failed to retrieve for display.";
                importSuccess = false;
                return;
            }

            importStatus = $"Successfully imported data with {importedData.Games.Count} games, {importedData.Plays.Count} plays, and {importedData.Players.Count} players.";
            importSuccess = true;

            // Refresh export data to include the newly imported data
            await RefreshExportData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing imported file");
            importStatus = $"Error processing file: {ex.Message}";
            importSuccess = false;
        }
    }

    private async Task RefreshExportData()
    {
        try
        {
            var currentData = await BGStatsService.GetCurrentDataAsync();

            if (currentData == null)
            {
                exportedJson = "No data available";
                return;
            }

            // Create a deep copy of the data for export to avoid modifying the original
            var exportData = new BGStatsExport
            {
                Games = currentData.Games.Select(g => new Game { Id = g.Id, Name = g.Name }).ToList(),
                Plays = currentData.Plays.Select(p => new Play
                {
                    Date = p.Date,
                    DurationInMinutes = p.DurationInMinutes,
                    Rounds = p.Rounds,
                    Variant = p.Variant,
                    GameRefId = p.GameRefId,
                    PlayerScores = p.PlayerScores.Select(ps => new PlayerScore
                    {
                        Score = ps.Score,
                        IsWinner = ps.IsWinner,
                        IsNewPlayer = ps.IsNewPlayer,
                        IsFirstPlayer = ps.IsFirstPlayer,
                        PlayerRefId = ps.PlayerRefId,
                        Deck = ps.Deck,
                        PlayerName = ps.PlayerName
                    }).ToList()
                }).ToList(),
                Players = ProcessPlayerNames(currentData.Players, nameModificationOption, ParseExcludePlayerIds())
            };

            var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            exportedJson = JsonSerializer.Serialize(exportData, jsonOptions);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing export data");
            exportedJson = "Error loading data";
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", exportedJson);
            copyStatus = "Data copied to clipboard successfully!";
            copySuccess = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying to clipboard");
            copyStatus = "Failed to copy to clipboard. Please select and copy manually.";
            copySuccess = false;
        }
    }

    private async Task OnNameModificationChanged()
    {
        await RefreshExportData();
    }

    private List<Player> ProcessPlayerNames(List<Player> players, string nameModificationOption, HashSet<int> excludedPlayerIds)
    {
        switch (nameModificationOption)
        {
            case "none":
                return players.Select(p => new Player { Id = p.Id, Name = p.Name }).ToList();
            case "simplify":
                return SimplifyPlayerNames(players);
            case "anonymize":
                return AnonymizePlayerNames(players, excludedPlayerIds);
            default:
                throw new ArgumentException("Invalid name modification option");
        }
    }

    private List<Player> SimplifyPlayerNames(List<Player> players)
    {
        // First pass: count occurrences of each first name
        var nameCounts = new Dictionary<string, int>();

        foreach (var player in players)
        {
            var nameParts = player.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var firstName = nameParts.FirstOrDefault() ?? string.Empty;

            if (nameCounts.ContainsKey(firstName))
            {
                nameCounts[firstName]++;
            }
            else
            {
                nameCounts[firstName] = 1;
            }
        }

        // Second pass: create simplified names
        var simplifiedPlayers = new List<Player>();

        foreach (var player in players)
        {
            var nameParts = player.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var firstName = nameParts.FirstOrDefault() ?? string.Empty;

            // If this first name appears multiple times, add this player's last name initial
            if (nameCounts[firstName] > 1 && nameParts.Length > 1)
            {
                var lastName = nameParts.Last();
                if (!string.IsNullOrEmpty(lastName))
                {
                    firstName += " " + lastName[0];
                }
            }

            simplifiedPlayers.Add(new Player { Id = player.Id, Name = firstName });
        }

        return simplifiedPlayers;
    }

    private List<Player> AnonymizePlayerNames(List<Player> players, HashSet<int> excludedPlayerIds)
    {
        var anonymizedNames = new[]
        {
            // Starting players in 2002 squad for Örgryte IS
            "Dick", "Thomas", "David", "Valter", "Johan", "Atli", "Mikael", "Robert",
            "Markus", "Magnus", "Morgan", "Jeffrey", "Martin", "Daniel", "Christian",
            "Joakim", "Afonso", "Paulinho", "Patrik",
            // Swedish gold medalists in curling 2006 and 2010
            "Anette", "Eva", "Cathrine", "Anna", "Ulrika", "Kajsa",
            // Swedish gold medalists in curling 2018
            "Sara", "Agnes", "Sofia", "Jennie"
        };

        // Prepare simplified names for excluded players
        var simplifiedPlayers = SimplifyPlayerNames(players.Where(p => excludedPlayerIds.Contains(p.Id)).ToList())
            .ToDictionary(p => p.Id, p => p.Name);

        // Add all simplified names to usedNames to prevent any anonymized player from getting a simplified name
        var usedNames = new HashSet<string>(simplifiedPlayers.Values);
        var anonymizedPlayers = new List<Player>();
        var nameCounts = new Dictionary<string, int>();
        var random = new Random();

        foreach (var player in players)
        {
            if (excludedPlayerIds.Contains(player.Id))
            {
                anonymizedPlayers.Add(new Player { Id = player.Id, Name = simplifiedPlayers[player.Id] });
                continue;
            }

            string anonymizedName;

            // Try to find an unused name
            var availableNames = anonymizedNames.Where(name => !usedNames.Contains(name)).ToArray();

            if (availableNames.Length > 0)
            {
                // Use an available name
                anonymizedName = availableNames[random.Next(availableNames.Length)];
                usedNames.Add(anonymizedName);
            }
            else
            {
                // If all names are used, add a letter to make it unique
                var baseName = anonymizedNames[random.Next(anonymizedNames.Length)];

                if (!nameCounts.ContainsKey(baseName))
                {
                    nameCounts[baseName] = 0;
                }
                nameCounts[baseName]++;

                var letterIndex = nameCounts[baseName] - 1; // Start with A (index 0)
                anonymizedName = $"{baseName} {(char)('A' + letterIndex)}";

                while (usedNames.Contains(anonymizedName))
                {
                    nameCounts[baseName]++;
                    letterIndex = nameCounts[baseName] - 1;
                    anonymizedName = $"{baseName} {(char)('A' + letterIndex)}";
                }
                usedNames.Add(anonymizedName);
            }

            anonymizedPlayers.Add(new Player { Id = player.Id, Name = anonymizedName });
        }

        return anonymizedPlayers;
    }

    private async void SetNoModification()
    {
        nameModificationOption = "none";
        await OnNameModificationChanged();
    }

    private async void SetSimplifyNames()
    {
        nameModificationOption = "simplify";
        await OnNameModificationChanged();
    }

    private async void SetAnonymizeNames()
    {
        nameModificationOption = "anonymize";
        await OnNameModificationChanged();
    }

    private async Task OnExcludePlayerIdsChanged()
    {
        if (nameModificationOption == "anonymize")
        {
            await RefreshExportData();
        }
    }

    private HashSet<int> ParseExcludePlayerIds()
    {
        if (string.IsNullOrEmpty(excludePlayerIds))
        {
            return new HashSet<int>();
        }

        var ids = excludePlayerIds.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                 .Select(id => int.TryParse(id, out var parsedId) ? parsedId : 0)
                                 .Where(id => id > 0)
                                 .ToHashSet();
        return ids;
    }
}