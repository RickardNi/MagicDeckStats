@page "/tools"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@using Microsoft.AspNetCore.Components
@inject IBGStatsImportService BGStatsService

<PageTitle>Tools - Magic Deck Stats</PageTitle>

<div class="container mt-2 mt-md-4">
    <h1><i class="bi bi-tools me-3 d-none d-md-inline"></i> Tools</h1>
    
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-shuffle"></i>Player Names Input
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="playerNames" class="form-label">Enter player names (one per line):</label>
                        <textarea 
                            id="playerNames" 
                            class="form-control" 
                            rows="10" 
                            placeholder="Enter player names here, one per line..."
                            @bind="playerNamesText">
                        </textarea>
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" @onclick="CreateMatchups">
                            Randomize Matches
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(processedResult))
                    {
                        <div class="mt-3">
                            <div class="matches-result">@((MarkupString)processedResult)</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string playerNamesText = "";
    private string processedResult = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMostFrequentPlayers();
    }

    private async Task LoadMostFrequentPlayers()
    {
        try
        {
            var plays = await BGStatsService.GetMagicPlaysAsync();
            
            var playerFrequency = plays
                .SelectMany(p => p.PlayerScores)
                .GroupBy(ps => ps.PlayerName)
                .OrderByDescending(g => g.Count())
                .Take(8)
                .Select(g => g.Key)
                .ToList();

            playerNamesText = string.Join("\n", playerFrequency);
        }
        catch
        {
            // If data loading fails, leave the textarea empty
            playerNamesText = "";
        }
    }

    private void CreateMatchups()
    {
        if (string.IsNullOrWhiteSpace(playerNamesText))
        {
            processedResult = "No player names entered.";
            return;
        }

        var players = playerNamesText.Split('\n', StringSplitOptions.RemoveEmptyEntries)
                                   .Select(line => line.Trim())
                                   .Where(line => !string.IsNullOrWhiteSpace(line))
                                   .ToList();

        if (players.Count == 0)
        {
            processedResult = "No valid player names found.";
            return;
        }

        if (players.Count == 1)
        {
            processedResult = "Only one player entered. Need at least 2 players for matchups.";
            return;
        }

        // Randomize the player list
        var random = new Random();
        var shuffledPlayers = players.OrderBy(x => random.Next()).ToList();

        processedResult = "<table class=\"matches-table\">";

        // Create matchups
        for (int i = 0; i < shuffledPlayers.Count - 1; i += 2)
        {
            var player1 = shuffledPlayers[i];
            var player2 = shuffledPlayers[i + 1];
            processedResult += $"<tr><td>Match {i / 2 + 1}:</td><td><span class=\"player-name\">{player1}</span></td><td>vs</td><td><span class=\"player-name\">{player2}</span></td></tr>";
        }

        // Handle walkover if odd number of players
        if (shuffledPlayers.Count % 2 != 0)
        {
            var walkoverPlayer = shuffledPlayers[shuffledPlayers.Count - 1];
            processedResult += $"<tr><td>Bye:</td><td><span class=\"player-name\">{walkoverPlayer}</span></td><td></td><td></td></tr>";
        }

        processedResult += "</table>";
    }
} 