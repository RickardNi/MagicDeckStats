@page "/deck/{urlDeckName}"
@using MagicDeckStats.Models
@using MagicDeckStats.Services
@using MagicDeckStats.Components
@using System.Web
@inject IBGStatsImportService BGStatsService
@inject IGlobalFilterService GlobalFilterService

<PageTitle>Magic Deck Stats - Deck Details</PageTitle>

<div class="container mt-4">
    <div>
        <h1><i class="bi bi-file-bar-graph-fill me-4"></i>Deck: <span class="fw-bold">@(deckStats?.DeckName ?? HttpUtility.UrlDecode(urlDeckName))</span></h1>
        @if (deckStats != null)
        {
            <TagBadges Tags="@Utilities.GetDeckTags(deckStats.DeckName)" ContainerClass="mt-2 mb-4" />
        }
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin me-2"></i>Loading deck details...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else if (deckStats == null)
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> Deck not found.
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up"></i>Stats
                        </h5>
                    </div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-5">Total Plays</dt>
                            <dd class="col-sm-7">@deckStats.TotalPlays (<span class="text-success">@deckStats.Wins W</span> / <span class="text-danger">@deckStats.Losses L</span>)</dd>
                            <dt class="col-sm-5">Win Rate</dt>
                            <dd class="col-sm-7 @(Utilities.GetWinRateColorForDeck(deckStats.WinRate))">@Utilities.FormatWinRate(deckStats.WinRate)</dd>
                            <dt class="col-sm-5">First Player Win Rate</dt>
                            <dd class="col-sm-7">@Utilities.FormatWinRate(playsAsFirstPlayer > 0 ? (double)winsAsFirstPlayer / playsAsFirstPlayer : 0)</dd>
                            <dt class="col-sm-5">Win Rate When Going Second</dt>
                            <dd class="col-sm-7">@Utilities.FormatWinRate(playsAsNonFirstPlayer > 0 ? (double)winsAsNonFirstPlayer / playsAsNonFirstPlayer : 0)</dd>
                            <dt class="col-sm-5">Average Duration</dt>
                            <dd class="col-sm-7">@((averageDuration > 0 ? $"{averageDuration:F1} min" : "-") )</dd>
                        </dl>
                        <hr class="my-3" />
                        <dl class="row mb-0">
                            <dt class="col-sm-5">Most Played By</dt>
                            <dd class="col-sm-7">@(GetMostPlayedByPlayer())</dd>
                            <dt class="col-sm-5">Most Successfully Played By</dt>
                            <dd class="col-sm-7">@(GetMostSuccessfulPlayer())</dd>
                            <dt class="col-sm-5">Least Successfully Played By</dt>
                            <dd class="col-sm-7">@(GetLeastSuccessfulPlayer())</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-6 mb-4 mb-md-0">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="bi bi-1-square"></i>First Player Win Rate</h5>
                    </div>
                    <div class="card-body">
                        @if (deckPlays.Any())
                        {
                            <ApexChart TItem="FirstPlayerStats" Options="@firstPlayerChartOptions">
                                <ApexPointSeries TItem="FirstPlayerStats"
                                                 Items="@firstPlayerStats"
                                                 Name="Plays"
                                                 SeriesType="SeriesType.Pie"
                                                 XValue="@(e => e.Result)"
                                                 YValue="@(e => e.Count)"
                                                 PointColor="e => GetPointColor(e)"
                                                 ShowDataLabels />
                            </ApexChart>
                            <div class="row text-center mt-3">
                                <div class="col-6">
                                    <div class="text-success">
                                        <div class="fw-bold">@winsAsFirstPlayer</div>
                                        <div class="small">Wins</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="text-danger">
                                        <div class="fw-bold">@lossesAsFirstPlayer</div>
                                        <div class="small">Losses</div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No plays found</p>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="bi bi-2-square"></i>Going Second</h5>
                    </div>
                    <div class="card-body">
                        @if (deckPlays.Any())
                        {
                            <ApexChart TItem="FirstPlayerStats" Options="@goingSecondChartOptions">
                                <ApexPointSeries TItem="FirstPlayerStats"
                                                 Items="@goingSecondStats"
                                                 Name="Plays"
                                                 SeriesType="SeriesType.Pie"
                                                 XValue="@(e => e.Result)"
                                                 YValue="@(e => e.Count)"
                                                 PointColor="e => GetPointColor(e)"
                                                 ShowDataLabels />
                            </ApexChart>
                            <div class="row text-center mt-3">
                                <div class="col-6">
                                    <div class="text-success">
                                        <div class="fw-bold">@winsAsNonFirstPlayer</div>
                                        <div class="small">Wins</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="text-danger">
                                        <div class="fw-bold">@lossesAsNonFirstPlayer</div>
                                        <div class="small">Losses</div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No plays found</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-arrow-left-right"></i>Matchups
                </h5>
            </div>
            <div class="card-body">
                @if (matchupStats.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(MatchupSortColumn.OpponentDeck)">
                                            Opponent
                                            @if (currentSortColumn == MatchupSortColumn.OpponentDeck)
                                            {
                                                <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(MatchupSortColumn.Plays)">
                                            Plays
                                            @if (currentSortColumn == MatchupSortColumn.Plays)
                                            {
                                                <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(MatchupSortColumn.Wins)">
                                            Wins
                                            @if (currentSortColumn == MatchupSortColumn.Wins)
                                            {
                                                <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(MatchupSortColumn.Losses)">
                                            Losses
                                            @if (currentSortColumn == MatchupSortColumn.Losses)
                                            {
                                                <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(MatchupSortColumn.WinRate)">
                                            Win Rate
                                            @if (currentSortColumn == MatchupSortColumn.WinRate)
                                            {
                                                <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var vs in GetSortedMatchupStats())
                                {
                                    <tr>
                                        <td>
                                            <NavLink class="deck-link" href="@Utilities.GetDeckUrl(vs.OpponentDeck)">@vs.OpponentDeck</NavLink>
                                        </td>
                                        <td class="text-center">@vs.Plays</td>
                                        <td class="text-center text-success">@vs.Wins</td>
                                        <td class="text-center text-danger">@vs.Losses</td>
                                        <td class="text-center fw-bold @(Utilities.GetWinRateColorForDeck(vs.WinRate))">@Utilities.FormatWinRate(vs.WinRate)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No plays against other decks found.</div>
                }
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-people-fill"></i>Played By
                </h5>
            </div>
            <div class="card-body">
                @if (playerStats.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortByPlayer(PlayerSortColumn.Player)">
                                            Player
                                            @if (currentPlayerSortColumn == PlayerSortColumn.Player)
                                            {
                                                <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortByPlayer(PlayerSortColumn.Plays)">
                                            Plays
                                            @if (currentPlayerSortColumn == PlayerSortColumn.Plays)
                                            {
                                                <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortByPlayer(PlayerSortColumn.Wins)">
                                            Wins
                                            @if (currentPlayerSortColumn == PlayerSortColumn.Wins)
                                            {
                                                <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortByPlayer(PlayerSortColumn.Losses)">
                                            Losses
                                            @if (currentPlayerSortColumn == PlayerSortColumn.Losses)
                                            {
                                                <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortByPlayer(PlayerSortColumn.WinRate)">
                                            Win Rate
                                            @if (currentPlayerSortColumn == PlayerSortColumn.WinRate)
                                            {
                                                <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                    <th class="text-center">
                                        <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortByPlayer(PlayerSortColumn.Duration)">
                                            Avg Duration
                                            @if (currentPlayerSortColumn == PlayerSortColumn.Duration)
                                            {
                                                <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-sort text-muted"></i>
                                            }
                                        </button>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ps in GetSortedPlayerStats())
                                {
                                    <tr>
                                        <td>@ps.PlayerName</td>
                                        <td class="text-center">@ps.Plays</td>
                                        <td class="text-center text-success">@ps.Wins</td>
                                        <td class="text-center text-danger">@ps.Losses</td>
                                        <td class="text-center fw-bold @(Utilities.GetWinRateColorForPlayer(ps.WinRate))">@Utilities.FormatWinRate(ps.WinRate)</td>
                                        <td class="text-center">@(ps.AverageDuration > 0 ? $"{ps.AverageDuration:F1} min" : "-")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No player data found for this deck.</div>
                }
            </div>
        </div>
    }

    @if (moxfieldId != null)
    {
        <!-- Moxfield Deck Embed -->
        <div class="row mt-4">
            <div class="col-12 text-center">
                <iframe 
                    src="https://moxfield.com/embed/@moxfieldId" 
                    frameBorder="0"
                    id="moxfield-frame-1"
                    style="width: 100%; height: 900px; border-radius: 8px;"
                    onload="moxfieldOnLoad(event)">
                </iframe>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter]
    public string urlDeckName { get; set; } = string.Empty;

    private bool isLoading = true;
    private string? errorMessage;
    private DeckStats? deckStats;
    private double averageDuration = 0;
    private List<MatchupStats> matchupStats = new();
    private List<Play> deckPlays = new();
    private List<PlayerStats> playerStats = new();
    private ApexChartOptions<FirstPlayerStats> firstPlayerChartOptions = new();
    private List<FirstPlayerStats> firstPlayerStats = new();
    private int lossesAsFirstPlayer = 0;
    private int lossesAsNonFirstPlayer = 0;
    private ApexChartOptions<FirstPlayerStats> goingSecondChartOptions = new();
    private List<FirstPlayerStats> goingSecondStats = new();
    private int winsAsFirstPlayer = 0;
    private int winsAsNonFirstPlayer = 0;
    private int playsAsFirstPlayer = 0;
    private int playsAsNonFirstPlayer = 0;

    private MatchupSortColumn currentSortColumn = MatchupSortColumn.Plays;
    private bool isAscending = false;

    private PlayerSortColumn currentPlayerSortColumn = PlayerSortColumn.Plays;
    private bool isPlayerSortAscending = false;
    
    private string? moxfieldId;
    
    // Hard-coded mapping of deck names to Moxfield IDs
    private static readonly Dictionary<string, string> DeckToMoxfieldMapping = new()
    {
        { "Adventure Time v1",      "" },
        { "Aether Flux v11",        "" },
        { "Aura Overload v*",       "" },
        { "Blue Skies v1",          "M0SU4nyUYU2qijMeb3UgbQ" },
        { "Blue Steal v1",          "" },
        { "Cascadia v1",            "" },
        { "Chimera Flash v2",       "u_nTdtAElU6dsh_W58myxQ" },
        { "Consuming Mutation v1",  "" },
        { "Converging Domains v6",  "" },
        { "Counter Culture v1",     "" },
        { "Day Breaker v1",         "" },
        { "Dino Might v1",          "bE8iXHeqTkWP5ojDiv0_rw" },
        { "Domain Event v1",        "ThCWGTKaekaiMJWTa0JkLg" },
        { "Domain Event v1.1",      "ex8psHC3TUaqcQ53iRE1wQ" },
        { "Dragon Horde v8",        "" },
        { "Elvish Ingenuity v1",    "" },
        { "Eternal Harvest v1",     "" },
        { "Extremely Toxic v1",     "" },
        { "Fightin' Fish v2",       "" },
        { "Firing Squad v1",        "FmkFHjr22EWJk74jnDEaJQ" },
        { "Fun Guys! v1",           "" },
        { "Genesis Rampage v1",     "" },
        { "Goblin Gang v2",         "" },
        { "Gray Matter v1",         "" },
        { "Green Giants v1",        "oeP54OC5402QphhC5-NviQ" },
        { "Heat Wave v1",           "" },
        { "High Rollers v1",        "" },
        { "Imperious Elves v4",     "" },
        { "Karmageddon v3",         "" },
        { "Knight Time v1",         "" },
        { "Land Masses v1",         "7E1rHL5XtUSLczyMQmp9Gg" },
        { "Land Masses v5",         "" },
        { "Licence to Mill v1",     "RFc71tzqokeBVQtqSbKb3g" },
        { "Licence to Mill v2.1",   "fV5qkHvc9024hilgehXcqA" },
        { "Licence to Mill v2.2",   "nJz72wL9ok-jac2oaSeXSQ" },
        { "Licence to Mill v2.3",   "7PQUxOdNT0eivvubRvy3Eg" },
        { "Life Hack v1",           "" },
        { "Lust for Life v2",       "LjkKN1Z3Vky71vyxE6Wa9A" },
        { "New Blood v1",           "hLZkJwnn5k6EaEeoHDvwEw" },
        { "Night & Day v1",         "" },
        { "Out of Hand v1",         "" },
        { "Pilot Program v1",       "" },
        { "Power Cycling v1",       "" },
        { "Power Tools v1",         "Uplj7kjQRU2mPtMXaI-Yqg" },
        { "Pyramid Scheme v1",      "qPNcuL1-dkuNr0LUQmH58g" },
        { "Pyramid Scheme v1.2",    "noAHdVOh9kSQ6pr9kPuyyQ" },
        { "Reanimaniacs v1",        "" },
        { "Red Menace v8",          "" },
        { "Rune Nation v1",         "" },
        { "Scrap Heap v1",          "" },
        { "Second Wind v4",         "" },
        { "Self Defense v1",        "" },
        { "Shock Troupes v6",       "" },
        { "Sinister Shrines v1",    "" },
        { "Snack Attack v1",        "" },
        { "Sphinx Control v3",      "" },
        { "Steadfast & Furious v1", "" },
        { "Target Practice v2",     "" },
        { "Underworld Schemes v3",  "" },
        { "Zombie Apocalypse v11",  "" }
    };

    protected override void OnInitialized()
    {
        GlobalFilterService.OnFilterChanged += OnFilterChanged;
    }

    public void Dispose()
    {
        GlobalFilterService.OnFilterChanged -= OnFilterChanged;
    }

    private async void OnFilterChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadDeckData();
            StateHasChanged();
        });
    }

    private async Task LoadDeckData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            deckStats = null;
            matchupStats.Clear();
            averageDuration = 0;
            deckPlays.Clear();
            playerStats.Clear();
            firstPlayerStats.Clear();
            goingSecondStats.Clear();
            winsAsFirstPlayer = 0;
            winsAsNonFirstPlayer = 0;
            lossesAsFirstPlayer = 0;
            lossesAsNonFirstPlayer = 0;
            playsAsFirstPlayer = 0;
            playsAsNonFirstPlayer = 0;

            // URL decode the deck name to handle special characters
            var deckName = HttpUtility.UrlDecode(urlDeckName);
            
            // Check if this deck has a Moxfield mapping with a valid ID
            moxfieldId = DeckToMoxfieldMapping.TryGetValue(deckName, out var id) && !string.IsNullOrEmpty(id) ? id : null;

            var plays = await BGStatsService.GetMagicPlaysAsync(GlobalFilterService.SelectedVariants);
            deckPlays = plays.Where(p => p.PlayerScores.Any(ps => ps.Deck == deckName)).ToList();
            if (!deckPlays.Any())
            {
                return;
            }

            var allScores = deckPlays.SelectMany(p => p.PlayerScores).Where(ps => ps.Deck == deckName).ToList();
            var totalPlays = allScores.Count;
            var wins = allScores.Count(ps => ps.IsWinner);
            var losses = allScores.Count(ps => !ps.IsWinner);
            var winRate = totalPlays > 0 ? (double)wins / totalPlays : 0;
            averageDuration = deckPlays.Any() ? deckPlays.Average(p => p.DurationInMinutes) : 0;

            deckStats = new DeckStats
            {
                DeckName = deckName,
                TotalPlays = totalPlays,
                Wins = wins,
                Losses = losses,
                WinRate = winRate
            };

            // First Player Win Rate Pie Chart
            winsAsFirstPlayer = deckPlays.Count(p => p.PlayerScores.Any(ps => ps.IsWinner && ps.IsFirstPlayer && ps.Deck == deckName));
            lossesAsFirstPlayer = deckPlays.Count(p => p.PlayerScores.Any(ps => !ps.IsWinner && ps.IsFirstPlayer && ps.Deck == deckName));
            winsAsNonFirstPlayer = deckPlays.Count(p => p.PlayerScores.Any(ps => ps.IsWinner && !ps.IsFirstPlayer && ps.Deck == deckName));
            lossesAsNonFirstPlayer = deckPlays.Count(p => p.PlayerScores.Any(ps => !ps.IsWinner && !ps.IsFirstPlayer && ps.Deck == deckName));
            playsAsFirstPlayer = deckPlays.Count(p => p.PlayerScores.Any(ps => ps.IsFirstPlayer && ps.Deck == deckName));
            playsAsNonFirstPlayer = deckPlays.Count(p => p.PlayerScores.Any(ps => !ps.IsFirstPlayer && ps.Deck == deckName));
            
            firstPlayerStats = new List<FirstPlayerStats>
            {
                new FirstPlayerStats { Result = "Losses", Count = lossesAsFirstPlayer },
                new FirstPlayerStats { Result = "Wins", Count = winsAsFirstPlayer }
            };
            
            goingSecondStats = new List<FirstPlayerStats>
            {
                new FirstPlayerStats { Result = "Losses", Count = lossesAsNonFirstPlayer },
                new FirstPlayerStats { Result = "Wins", Count = winsAsNonFirstPlayer }
            };
            
            firstPlayerChartOptions = new ApexChartOptions<FirstPlayerStats>
            {
                Chart = new Chart
                {
                    Type = ChartType.Pie,
                    Height = 300,
                    FontFamily = "Roboto Condensed"
                },
                Legend = new Legend
                {
                    Show = false
                },
                DataLabels = new DataLabels
                {
                    Style = new DataLabelsStyle
                    {
                        FontSize = "14px",
                        FontWeight = "bold"
                    }
                },
                Responsive = new List<Responsive<FirstPlayerStats>>
                {
                    new Responsive<FirstPlayerStats>
                    {
                        Breakpoint = 480,
                        Options = new ApexChartOptions<FirstPlayerStats>
                        {
                            Chart = new Chart { Width = 200, FontFamily = "Roboto Condensed" }
                        }
                    }
                }
            };
            
            goingSecondChartOptions = new ApexChartOptions<FirstPlayerStats>
            {
                Chart = new Chart
                {
                    Type = ChartType.Pie,
                    Height = 300,
                    FontFamily = "Roboto Condensed"
                },
                Legend = new Legend
                {
                    Show = false
                },
                DataLabels = new DataLabels
                {
                    Style = new DataLabelsStyle
                    {
                        FontSize = "14px",
                        FontWeight = "bold"
                    }
                },
                Responsive = new List<Responsive<FirstPlayerStats>>
                {
                    new Responsive<FirstPlayerStats>
                    {
                        Breakpoint = 480,
                        Options = new ApexChartOptions<FirstPlayerStats>
                        {
                            Chart = new Chart { Width = 200, FontFamily = "Roboto Condensed" }
                        }
                    }
                }
            };

            // Calculate win rate vs other decks
            var matchupGroups = new Dictionary<string, (int Plays, int Wins, int Losses)>();
            foreach (var play in deckPlays)
            {
                var thisDeckScore = play.PlayerScores.FirstOrDefault(ps => ps.Deck == deckName);
                var opponentScores = play.PlayerScores.Where(ps => ps.Deck != deckName).ToList();
                foreach (var opp in opponentScores)
                {
                    if (!matchupGroups.ContainsKey(opp.Deck))
                        matchupGroups[opp.Deck] = (0, 0, 0);
                    var numberOfPlays = matchupGroups[opp.Deck].Plays + 1;
                    var winsVs = matchupGroups[opp.Deck].Wins + (thisDeckScore?.IsWinner == true ? 1 : 0);
                    var lossesVs = matchupGroups[opp.Deck].Losses + (thisDeckScore?.IsWinner == false ? 1 : 0);
                    matchupGroups[opp.Deck] = (numberOfPlays, winsVs, lossesVs);
                }
            }
            matchupStats = matchupGroups.Select(kvp => new MatchupStats
            {
                OpponentDeck = kvp.Key,
                Plays = kvp.Value.Plays,
                Wins = kvp.Value.Wins,
                Losses = kvp.Value.Losses,
                WinRate = kvp.Value.Plays > 0 ? (double)kvp.Value.Wins / kvp.Value.Plays : 0
            }).ToList();

            // Calculate player stats for this deck
            var playerGroups = new Dictionary<string, (int Plays, int Wins, int Losses, List<double> Durations)>();
            foreach (var play in deckPlays)
            {
                var thisDeckScores = play.PlayerScores.Where(ps => ps.Deck == deckName).ToList();
                foreach (var score in thisDeckScores)
                {
                    var playerName = score.PlayerName;
                    if (string.IsNullOrEmpty(playerName))
                        continue;

                    if (!playerGroups.ContainsKey(playerName))
                        playerGroups[playerName] = (0, 0, 0, new List<double>());

                    var numberOfPlays = playerGroups[playerName].Plays + 1;
                    var playerWins = playerGroups[playerName].Wins + (score.IsWinner ? 1 : 0);
                    var playerLosses = playerGroups[playerName].Losses + (score.IsWinner ? 0 : 1);
                    var durations = playerGroups[playerName].Durations;
                    durations.Add(play.DurationInMinutes);
                    
                    playerGroups[playerName] = (numberOfPlays, playerWins, playerLosses, durations);
                }
            }

            playerStats = playerGroups.Select(kvp => new PlayerStats
            {
                PlayerName = kvp.Key,
                Plays = kvp.Value.Plays,
                Wins = kvp.Value.Wins,
                Losses = kvp.Value.Losses,
                WinRate = kvp.Value.Plays > 0 ? (double)kvp.Value.Wins / kvp.Value.Plays : 0,
                AverageDuration = kvp.Value.Durations.Any() ? kvp.Value.Durations.Average() : 0
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading deck details: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }



    private string GetPointColor(FirstPlayerStats stats)
    {
        return stats.Result == "Wins" ? "#28a745" : "#dc3545";
    }

    private string GetMostPlayedByPlayer()
    {
        if (!playerStats.Any())
            return "-";

        var mostPlayed = playerStats.OrderByDescending(p => p.Plays).First();
        return $"{mostPlayed.PlayerName} ({mostPlayed.Plays} plays)";
    }

    private string GetMostSuccessfulPlayer()
    {
        if (!playerStats.Any())
            return "-";

        var mostSuccessful = playerStats.OrderByDescending(p => p.WinRate).First();
        return $"{mostSuccessful.PlayerName} ({Utilities.FormatWinRate(mostSuccessful.WinRate)})";
    }

    private string GetLeastSuccessfulPlayer()
    {
        if (!playerStats.Any())
            return "-";

        var leastSuccessful = playerStats.OrderBy(p => p.WinRate).First();
        return $"{leastSuccessful.PlayerName} ({Utilities.FormatWinRate(leastSuccessful.WinRate)})";
    }

    private enum MatchupSortColumn
    {
        OpponentDeck,
        Plays,
        Wins,
        Losses,
        WinRate
    }

    private enum PlayerSortColumn
    {
        Player,
        Plays,
        Wins,
        Losses,
        WinRate,
        Duration
    }

    private void SortBy(MatchupSortColumn column)
    {
        if (column == currentSortColumn)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = false;
        }
    }

    private void SortByPlayer(PlayerSortColumn column)
    {
        if (column == currentPlayerSortColumn)
        {
            isPlayerSortAscending = !isPlayerSortAscending;
        }
        else
        {
            currentPlayerSortColumn = column;
            isPlayerSortAscending = false;
        }
    }

    private IEnumerable<MatchupStats> GetSortedMatchupStats()
    {
        IEnumerable<MatchupStats> query = matchupStats;
        switch (currentSortColumn)
        {
            case MatchupSortColumn.OpponentDeck:
                query = isAscending ? query.OrderBy(m => m.OpponentDeck) : query.OrderByDescending(m => m.OpponentDeck);
                break;
            case MatchupSortColumn.Plays:
                query = isAscending ? query.OrderBy(m => m.Plays) : query.OrderByDescending(m => m.Plays);
                break;
            case MatchupSortColumn.Wins:
                query = isAscending ? query.OrderBy(m => m.Wins) : query.OrderByDescending(m => m.Wins);
                break;
            case MatchupSortColumn.Losses:
                query = isAscending ? query.OrderBy(m => m.Losses) : query.OrderByDescending(m => m.Losses);
                break;
            case MatchupSortColumn.WinRate:
                query = isAscending ? query.OrderBy(m => m.WinRate) : query.OrderByDescending(m => m.WinRate);
                break;
        }
        return query;
    }

    private IEnumerable<PlayerStats> GetSortedPlayerStats()
    {
        IEnumerable<PlayerStats> query = playerStats;
        switch (currentPlayerSortColumn)
        {
            case PlayerSortColumn.Player:
                query = isPlayerSortAscending ? query.OrderBy(p => p.PlayerName) : query.OrderByDescending(p => p.PlayerName);
                break;
            case PlayerSortColumn.Plays:
                query = isPlayerSortAscending ? query.OrderBy(p => p.Plays) : query.OrderByDescending(p => p.Plays);
                break;
            case PlayerSortColumn.Wins:
                query = isPlayerSortAscending ? query.OrderBy(p => p.Wins) : query.OrderByDescending(p => p.Wins);
                break;
            case PlayerSortColumn.Losses:
                query = isPlayerSortAscending ? query.OrderBy(p => p.Losses) : query.OrderByDescending(p => p.Losses);
                break;
            case PlayerSortColumn.WinRate:
                query = isPlayerSortAscending ? query.OrderBy(p => p.WinRate) : query.OrderByDescending(p => p.WinRate);
                break;
            case PlayerSortColumn.Duration:
                query = isPlayerSortAscending ? query.OrderBy(p => p.AverageDuration) : query.OrderByDescending(p => p.AverageDuration);
                break;
        }
        return query;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadDeckData();
    }

    private class DeckStats
    {
        public string DeckName { get; set; } = string.Empty;
        public int TotalPlays { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public double WinRate { get; set; }
    }

    private class MatchupStats
    {
        public string OpponentDeck { get; set; } = string.Empty;
        public int Plays { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public double WinRate { get; set; }
    }

    public class FirstPlayerStats
    {
        public string Result { get; set; } = string.Empty;
        public int Count { get; set; }
    }

    private class PlayerStats
    {
        public string PlayerName { get; set; } = string.Empty;
        public int Plays { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public double WinRate { get; set; }
        public double AverageDuration { get; set; }
    }
} 