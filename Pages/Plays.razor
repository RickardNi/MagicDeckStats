@page "/plays"
@using MagicDeckStats.Components
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService
@inject IGlobalFilterService GlobalFilterService

<PageTitle>Magic Deck Stats - All Plays</PageTitle>

<div class="container mt-2 mt-md-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h1><i class="bi bi-list-ul me-4 d-none d-md-inline"></i>All Plays</h1>
        <div class="text-muted mt-1 mt-md-0">
            Showing @((currentPage - 1) * pageSize + 1)-@Math.Min(currentPage * pageSize, filteredPlays.Count) of @filteredPlays.Count plays
        </div>
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin me-2"></i>Loading plays...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i>@errorMessage
        </div>
    }
    else if (!plays.Any())
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>No plays found.
        </div>
    }
    else
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-funnel me-2"></i>Filters</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" @bind="StartDate" @bind:event="oninput" />
                    </div>
                    <div class="col-md-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" @bind="EndDate" @bind:event="oninput" />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button class="btn btn-secondary w-100" @onclick="ClearFilters">
                            <i class="bi bi-arrow-clockwise me-1"></i>Reset
                        </button>
                    </div>
                </div>
                <div class="row g-3 mt-2">
                    <div class="col-md-6">
                        <label for="playerFilter" class="form-label">Players</label>
                        <select class="form-select" id="playerFilter" multiple size="6" @key="selectKey" @onchange="OnPlayerSelectionChanged">
                            @foreach (var player in allPlayers)
                            {
                                var isSelected = selectedPlayers.Contains(player);
                                <option value="@player" selected="@isSelected">@player</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <div class="mt-0 mt-md-4">
                            <ul class="small text-muted mb-0">
                                <li class="mb-1"><strong>0 players:</strong> Show all plays</li>
                                <li class="mb-1"><strong>1 player:</strong> Show all plays involving that player</li>
                                <li class="mb-1"><strong>2 players:</strong> Show only 2-player games between those players</li>
                                <li class="mb-1"><strong>3+ players:</strong> Show plays where all players are among the selected ones</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <PlaysTable Plays="@currentPagePlays" />

                @if (totalPages > 1)
                {
                    <nav aria-label="Plays pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>

                            @{
                                var startPage = Math.Max(1, currentPage - 2);
                                var endPage = Math.Min(totalPages, currentPage + 2);

                                if (startPage > 1)
                                {
                                    <li class="page-item">
                                        <button class="page-link" @onclick="() => GoToPage(1)">1</button>
                                    </li>
                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }

                                if (endPage < totalPages)
                                {
                                    if (endPage < totalPages - 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                    <li class="page-item">
                                        <button class="page-link" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                                    </li>
                                }
                            }

                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<Play> plays = new();
    private List<Play> filteredPlays = new();
    private List<Play> currentPagePlays = new();
    private List<string> allPlayers = new();
    
    private int currentPage = 1;
    private int pageSize = 100;
    private int totalPages = 0;
    
    // Filter properties
    private DateTime? startDate;
    private DateTime? endDate;
    private List<string> selectedPlayers = new();
    
    // Key to force re-rendering of the select element
    private int selectKey = 0;

    protected override void OnInitialized()
    {
        GlobalFilterService.OnFilterChanged += OnFilterChanged;
    }

    public void Dispose()
    {
        GlobalFilterService.OnFilterChanged -= OnFilterChanged;
    }

    private async void OnFilterChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();
        });
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            plays = await BGStatsService.GetMagicPlaysAsync(GlobalFilterService.SelectedVariants);
            plays = plays.OrderByDescending(p => p.Date).ToList();
            
            // Extract all unique player names
            allPlayers = plays.SelectMany(p => p.PlayerScores)
                             .Select(ps => ps.PlayerName)
                             .Distinct()
                             .OrderBy(name => name)
                             .ToList();
            
            // Set default date range to earliest and latest dates in plays
            var validDates = plays.Where(p => DateTime.TryParse(p.Date, out _))
                                 .Select(p => DateTime.Parse(p.Date))
                                 .ToList();
            
            if (validDates.Any())
            {
                startDate = validDates.Min();
                endDate = validDates.Max();
            }
            else
            {
                // Fallback to last 30 days if no valid dates found
                endDate = DateTime.Today;
                startDate = endDate.Value.AddDays(-30);
            }
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private DateTime? StartDate
    {
        get => startDate;
        set
        {
            if (startDate != value)
            {
                startDate = value;
                ApplyFilters();
            }
        }
    }

    private DateTime? EndDate
    {
        get => endDate;
        set
        {
            if (endDate != value)
            {
                endDate = value;
                ApplyFilters();
            }
        }
    }

    private void ApplyFilters()
    {
        var query = plays.AsEnumerable();

        // Apply date filter
        if (startDate.HasValue)
        {
            query = query.Where(p => DateTime.TryParse(p.Date, out var playDate) && playDate >= startDate.Value);
        }
        
        if (endDate.HasValue)
        {
            query = query.Where(p => DateTime.TryParse(p.Date, out var playDate) && playDate <= endDate.Value);
        }

        // Apply player filter
        if (selectedPlayers.Count == 1)
        {
            // Show all plays involving the selected player
            query = query.Where(p => p.PlayerScores.Any(ps => selectedPlayers.Contains(ps.PlayerName)));
        }
        else if (selectedPlayers.Count == 2)
        {
            // Show only plays involving exactly those two players
            query = query.Where(p => 
                p.PlayerScores.Count == 2 && 
                p.PlayerScores.All(ps => selectedPlayers.Contains(ps.PlayerName)));
        }
        else if (selectedPlayers.Count > 2)
        {
            // Show plays where all players in the play are among the selected ones
            query = query.Where(p => p.PlayerScores.All(ps => selectedPlayers.Contains(ps.PlayerName)));
        }
        // If selectedPlayers.Count == 0, no filtering applied (show all plays)

        filteredPlays = query.ToList();
        
        // Reset to first page and update pagination
        currentPage = 1;
        totalPages = (int)Math.Ceiling((double)filteredPlays.Count / pageSize);
        
        UpdateCurrentPagePlays();
    }

    private void ClearFilters()
    {
        // Reset to earliest and latest dates in plays
        var validDates = plays.Where(p => DateTime.TryParse(p.Date, out _))
                             .Select(p => DateTime.Parse(p.Date))
                             .ToList();
        
        if (validDates.Any())
        {
            startDate = validDates.Min();
            endDate = validDates.Max();
        }
        else
        {
            startDate = null;
            endDate = null;
        }
        
        selectedPlayers.Clear();
        
        // Change the key to force Blazor to completely re-render the select element
        selectKey++;
        
        ApplyFilters();
        StateHasChanged();
    }

    private void UpdateCurrentPagePlays()
    {
        var skip = (currentPage - 1) * pageSize;
        currentPagePlays = filteredPlays.Skip(skip).Take(pageSize).ToList();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            UpdateCurrentPagePlays();
        }
    }

    private void OnPlayerSelectionChanged(ChangeEventArgs e)
    {
        if (e.Value is IEnumerable<string> selectedValues)
        {
            selectedPlayers = selectedValues.ToList();
        }
        else if (e.Value is string singleValue)
        {
            selectedPlayers = new List<string> { singleValue };
        }
        else
        {
            selectedPlayers = new List<string>();
        }
        ApplyFilters();
    }
} 