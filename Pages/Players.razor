@page "/players"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService

<PageTitle>Magic Deck Stats - Players</PageTitle>

<div class="container mt-2 mt-md-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h1><i class="bi bi-people-fill me-4 d-none d-md-inline"></i>Players</h1>
        <div class="text-muted mt-1 mt-md-0">
            Showing @((currentPage - 1) * pageSize + 1)-@Math.Min(currentPage * pageSize, totalPlayers) of @totalPlayers players
        </div>
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin"></i>Loading players...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i>@errorMessage
        </div>
    }
    else if (!playerStats.Any())
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>No players found.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Rank)">
                                        Rank
                                        @if (currentSortColumn == SortColumn.Rank)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.PlayerName)">
                                        Name
                                        @if (currentSortColumn == SortColumn.PlayerName)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.GamesPlayed)">
                                        Plays
                                        @if (currentSortColumn == SortColumn.GamesPlayed)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.UniqueDecks)">
                                        Decks Played
                                        @if (currentSortColumn == SortColumn.UniqueDecks)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Wins)">
                                        Wins
                                        @if (currentSortColumn == SortColumn.Wins)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Losses)">
                                        Losses
                                        @if (currentSortColumn == SortColumn.Losses)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.WinRate)">
                                        Win Rate
                                        @if (currentSortColumn == SortColumn.WinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.FirstPlayerWinRate)">
                                        <i class="bi bi-1-square me-1"></i> Player Win
                                        @if (currentSortColumn == SortColumn.FirstPlayerWinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.SecondPlayerWinRate)">
                                        <i class="bi bi-2-square me-1"></i> Player Win
                                        @if (currentSortColumn == SortColumn.SecondPlayerWinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.FirstPlayer)">
                                        <i class="bi bi-1-square me-1"></i>
                                        @if (currentSortColumn == SortColumn.FirstPlayer)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.FavouriteDeck)">
                                        Most Played Deck
                                        @if (currentSortColumn == SortColumn.FavouriteDeck)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var player in GetSortedPlayerStats())
                            {
                                <tr>
                                    <td>
                                        @if (player.Rank == 1)
                                        {
                                            <span class="badge bg-warning">🥇</span>
                                        }
                                        else if (player.Rank == 2)
                                        {
                                            <span class="badge bg-secondary">🥈</span>
                                        }
                                        else if (player.Rank == 3)
                                        {
                                            <span class="badge" style="background-color: #cd7f32; color: white;">🥉</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">@player.Rank</span>
                                        }
                                    </td>
                                    <td>
                                        <NavLink class="player-link" href="@Utilities.GetPlayerUrl(player.PlayerRefId)">
                                            <strong>@player.PlayerName</strong>
                                        </NavLink>
                                    </td>
                                    <td class="text-center">@player.GamesPlayed</td>
                                    <td class="text-center">@player.UniqueDecks</td>
                                    <td class="text-center">
                                        <span class="text-success fw-bold">@player.Wins</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="text-danger fw-bold">@player.Losses</span>
                                    </td>
                                    <td class="text-center">
                                        @{
                                            var winRateColor = Utilities.GetWinRateColorForPlayer(player.WinRate);
                                        }
                                        <span class="fw-bold @winRateColor">@player.WinRate.ToString("F1")%</span>
                                    </td>
                                    <td class="text-center">
                                        @{
                                            var firstPlayerColor = Utilities.GetWinRateColorForPlayer(player.FirstPlayerWinRate);
                                            <span class="fw-bold @firstPlayerColor">@player.FirstPlayerWinRate.ToString("F1")%</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @{
                                            var secondPlayerColor = Utilities.GetWinRateColorForPlayer(player.SecondPlayerWinRate);
                                            <span class="fw-bold @secondPlayerColor">@player.SecondPlayerWinRate.ToString("F1")%</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold">@player.FirstPlayer.ToString("F1")%</span>
                                    </td>
                                    <td>
                                        <NavLink class="deck-link" href="@Utilities.GetDeckUrl(player.MostPlayedDeck)">@player.MostPlayedDeck</NavLink> (@player.MostPlayedDeckPlays)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (totalPages > 1)
                {
                    <nav aria-label="Players pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>

                            @{
                                var startPage = Math.Max(1, currentPage - 2);
                                var endPage = Math.Min(totalPages, currentPage + 2);

                                if (startPage > 1)
                                {
                                    <li class="page-item">
                                        <button class="page-link" @onclick="() => GoToPage(1)">1</button>
                                    </li>
                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }

                                if (endPage < totalPages)
                                {
                                    if (endPage < totalPages - 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                    <li class="page-item">
                                        <button class="page-link" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                                    </li>
                                }
                            }

                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<Play> plays = new();
    private List<PlayerStats> playerStats = new();
    private List<PlayerStats> currentPagePlayerStats = new();
    
    private int currentPage = 1;
    private int pageSize = 50;
    private int totalPlayers = 0;
    private int totalPages = 0;
    private SortColumn currentSortColumn = SortColumn.Rank;
    private bool isAscending = true;

    public class PlayerStats
    {
        public int Rank { get; set; }
        public string PlayerName { get; set; } = string.Empty;
        public int PlayerRefId { get; set; }
        public int GamesPlayed { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public double WinRate { get; set; }
        public int UniqueDecks { get; set; }
        public string MostPlayedDeck { get; set; } = string.Empty;
        public int MostPlayedDeckPlays { get; set; }
        public double FirstPlayerWinRate { get; set; }
        public double SecondPlayerWinRate { get; set; }
        public double FirstPlayer { get; set; }
    }

    private enum SortColumn
    {
        Rank,
        PlayerName,
        GamesPlayed,
        UniqueDecks,
        Wins,
        Losses,
        WinRate,
        FavouriteDeck,
        FirstPlayerWinRate,
        SecondPlayerWinRate,
        FirstPlayer
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get all Magic plays
            plays = await BGStatsService.GetMagicPlaysAsync();
            
            // Calculate player statistics
            CalculatePlayerStats();
            
            totalPlayers = playerStats.Count;
            totalPages = (int)Math.Ceiling((double)totalPlayers / pageSize);
            
            UpdateCurrentPagePlayerStats();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculatePlayerStats()
    {
        var allPlayerScores = plays.SelectMany(p => p.PlayerScores).ToList();

        var playerGroups = allPlayerScores
            .GroupBy(ps => ps.PlayerName)
            .ToList();

        playerStats = playerGroups
            .Select((g, index) => new PlayerStats
            {
                Rank = index + 1,
                PlayerName = g.Key,
                PlayerRefId = g.First().PlayerRefId,
                GamesPlayed = g.Count(),
                Wins = g.Count(ps => ps.IsWinner),
                Losses = g.Count(ps => !ps.IsWinner),
                WinRate = g.Count(ps => ps.IsWinner) * 100.0 / g.Count(),
                UniqueDecks = g.Select(ps => ps.Deck).Distinct().Count(),
                MostPlayedDeck = g.GroupBy(ps => ps.Deck)
                                 .OrderByDescending(dg => dg.Count())
                                 .First().Key,
                MostPlayedDeckPlays = g.Count(ps => ps.Deck == g.GroupBy(ps => ps.Deck)
                                 .OrderByDescending(dg => dg.Count())
                                 .First().Key),
                FirstPlayerWinRate = g.Count(ps => ps.IsFirstPlayer) > 0 
                    ? g.Count(ps => ps.IsWinner && ps.IsFirstPlayer) * 100.0 / g.Count(ps => ps.IsFirstPlayer)
                    : 0,
                SecondPlayerWinRate = g.Count(ps => !ps.IsFirstPlayer) > 0 
                    ? g.Count(ps => ps.IsWinner && !ps.IsFirstPlayer) * 100.0 / g.Count(ps => !ps.IsFirstPlayer)
                    : 0,
                FirstPlayer = g.Count(ps => ps.IsFirstPlayer) * 100.0 / g.Count()
            })
            .OrderByDescending(p => p.GamesPlayed)
            .ThenByDescending(p => p.WinRate)
            .ToList();
    }

    private void UpdateCurrentPagePlayerStats()
    {
        var skip = (currentPage - 1) * pageSize;
        currentPagePlayerStats = playerStats.Skip(skip).Take(pageSize).ToList();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            UpdateCurrentPagePlayerStats();
        }
    }

    private List<PlayerStats> GetSortedPlayerStats()
    {
        var sortedStats = currentPagePlayerStats;

        if (currentSortColumn == SortColumn.Rank)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.Rank).ToList() : sortedStats.OrderByDescending(p => p.Rank).ToList();
        }
        else if (currentSortColumn == SortColumn.PlayerName)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.PlayerName).ToList() : sortedStats.OrderByDescending(p => p.PlayerName).ToList();
        }
        else if (currentSortColumn == SortColumn.GamesPlayed)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.GamesPlayed).ToList() : sortedStats.OrderByDescending(p => p.GamesPlayed).ToList();
        }
        else if (currentSortColumn == SortColumn.UniqueDecks)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.UniqueDecks).ToList() : sortedStats.OrderByDescending(p => p.UniqueDecks).ToList();
        }
        else if (currentSortColumn == SortColumn.Wins)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.Wins).ToList() : sortedStats.OrderByDescending(p => p.Wins).ToList();
        }
        else if (currentSortColumn == SortColumn.Losses)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.Losses).ToList() : sortedStats.OrderByDescending(p => p.Losses).ToList();
        }
        else if (currentSortColumn == SortColumn.WinRate)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.WinRate).ToList() : sortedStats.OrderByDescending(p => p.WinRate).ToList();
        }
        else if (currentSortColumn == SortColumn.FavouriteDeck)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.MostPlayedDeck).ToList() : sortedStats.OrderByDescending(p => p.MostPlayedDeck).ToList();
        }
        else if (currentSortColumn == SortColumn.FirstPlayerWinRate)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.FirstPlayerWinRate).ToList() : sortedStats.OrderByDescending(p => p.FirstPlayerWinRate).ToList();
        }
        else if (currentSortColumn == SortColumn.SecondPlayerWinRate)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.SecondPlayerWinRate).ToList() : sortedStats.OrderByDescending(p => p.SecondPlayerWinRate).ToList();
        }
        else if (currentSortColumn == SortColumn.FirstPlayer)
        {
            sortedStats = isAscending ? sortedStats.OrderBy(p => p.FirstPlayer).ToList() : sortedStats.OrderByDescending(p => p.FirstPlayer).ToList();
        }

        return sortedStats;
    }

    private void SortBy(SortColumn column)
    {
        if (column == currentSortColumn)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }

        UpdateCurrentPagePlayerStats();
    }
} 