@page "/decks"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService

<PageTitle>Magic Deck Stats - Decks</PageTitle>

<div class="container mt-2 mt-md-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h1><i class="bi bi-stack me-3 d-none d-md-inline"></i> Decks</h1>
        <div class="text-muted mt-1 mt-md-0">
            Showing @deckStats.Count decks
        </div>
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin"></i> Loading deck statistics...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else if (!deckStats.Any())
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> No decks found.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.DeckName)">
                                        Deck Name
                                        @if (currentSortColumn == SortColumn.DeckName)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Plays)">
                                        Plays
                                        @if (currentSortColumn == SortColumn.Plays)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Wins)">
                                        Wins
                                        @if (currentSortColumn == SortColumn.Wins)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Losses)">
                                        Losses
                                        @if (currentSortColumn == SortColumn.Losses)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.WinRate)">
                                        Win %
                                        @if (currentSortColumn == SortColumn.WinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.FirstPlayerWinRate)">
                                        <i class="bi bi-1-square me-1"></i> Player Win %
                                        @if (currentSortColumn == SortColumn.FirstPlayerWinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.GoingSecondWinRate)">
                                        <i class="bi bi-2-square me-1"></i> Player Win %
                                        @if (currentSortColumn == SortColumn.GoingSecondWinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.LastPlayed)">
                                        Last Played
                                        @if (currentSortColumn == SortColumn.LastPlayed)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var deck in GetSortedDeckStats())
                            {
                                var winRatePercentage = deck.TotalPlays > 0 ? (double)deck.Wins / deck.TotalPlays * 100 : 0;
                                var winRateColor = Utilities.GetWinRateColorForDeck(winRatePercentage);
                                
                                <tr>
                                    <td>
                                        <NavLink class="deck-link" href="@Utilities.GetDeckUrl(deck.DeckName)">@deck.DeckName</NavLink>
                                    </td>
                                    <td class="text-center">
                                        @deck.TotalPlays
                                    </td>
                                    <td class="text-center">
                                        <span class="text-success fw-bold">@deck.Wins</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="text-danger">@deck.Losses</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold @winRateColor">@(winRatePercentage.ToString("F1"))%</span>
                                    </td>
                                    <td class="text-center">
                                        @if (deck.FirstPlayerPlays > 0)
                                        {
                                            var firstPlayerWinRate = deck.FirstPlayerWinRate * 100;
                                            var firstPlayerColor = Utilities.GetWinRateColorForDeck(firstPlayerWinRate);
                                            <span class="fw-bold @firstPlayerColor">@(firstPlayerWinRate.ToString("F1"))%</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (deck.GoingSecondPlays > 0)
                                        {
                                            var goingSecondWinRate = deck.GoingSecondWinRate * 100;
                                            var goingSecondColor = Utilities.GetWinRateColorForDeck(goingSecondWinRate);
                                            <span class="fw-bold @goingSecondColor">@(goingSecondWinRate.ToString("F1"))%</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (deck.LastPlayed.HasValue)
                                        {
                                            <span class="text-muted">@deck.LastPlayed.Value.ToString("yyyy-MM-dd")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-bar-chart me-2"></i> Win Rate Chart
                </h5>
            </div>
            <div class="card-body">
                <ApexChart TItem="DeckStats">
                    <ApexPointSeries TItem="DeckStats"
                                     Items="GetSortedDeckStats()"
                                     Name="Win Rate"
                                     SeriesType="SeriesType.Bar"
                                     XValue="e => e.DeckName"
                                     YValue="e => (decimal)(e.TotalPlays > 0 ? (int)((double)e.Wins / e.TotalPlays * 100) : 0)" />
                </ApexChart>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<DeckStats> deckStats = new();
    private SortColumn currentSortColumn = SortColumn.WinRate;
    private bool isAscending = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get all Magic plays
            var plays = await BGStatsService.GetMagicPlaysAsync();
            
            // Calculate deck statistics
            var deckGroups = plays
                .SelectMany(p => p.PlayerScores)
                .GroupBy(ps => ps.Deck)
                .Where(g => !string.IsNullOrWhiteSpace(g.Key));

            deckStats = deckGroups.Select(g => new DeckStats
            {
                DeckName = g.Key,
                TotalPlays = g.Count(),
                Wins = g.Count(ps => ps.IsWinner),
                Losses = g.Count(ps => !ps.IsWinner),
                FirstPlayerPlays = g.Count(ps => ps.IsFirstPlayer),
                FirstPlayerWins = g.Count(ps => ps.IsFirstPlayer && ps.IsWinner),
                GoingSecondPlays = g.Count(ps => !ps.IsFirstPlayer),
                GoingSecondWins = g.Count(ps => !ps.IsFirstPlayer && ps.IsWinner),
                LastPlayed = g.Max(ps => DateTime.Parse(plays.First(p => p.PlayerScores.Contains(ps)).Date))
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SortBy(SortColumn column)
    {
        if (column == currentSortColumn)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = false;
        }
    }

    private List<DeckStats> GetSortedDeckStats()
    {
        var query = currentSortColumn switch
        {
            SortColumn.DeckName => deckStats.AsQueryable(),
            SortColumn.Plays => deckStats.AsQueryable(),
            SortColumn.Wins => deckStats.AsQueryable(),
            SortColumn.Losses => deckStats.AsQueryable(),
            SortColumn.WinRate => deckStats.AsQueryable(),
            SortColumn.FirstPlayerWinRate => deckStats.AsQueryable(),
            SortColumn.GoingSecondWinRate => deckStats.AsQueryable(),
            SortColumn.LastPlayed => deckStats.AsQueryable(),
            _ => deckStats.AsQueryable()
        };

        var sortedDeckStats = currentSortColumn switch
        {
            SortColumn.DeckName => isAscending ? query.OrderBy(d => d.DeckName) : query.OrderByDescending(d => d.DeckName),
            SortColumn.Plays => isAscending ? query.OrderBy(d => d.TotalPlays) : query.OrderByDescending(d => d.TotalPlays),
            SortColumn.Wins => isAscending ? query.OrderBy(d => d.Wins) : query.OrderByDescending(d => d.Wins),
            SortColumn.Losses => isAscending ? query.OrderBy(d => d.Losses) : query.OrderByDescending(d => d.Losses),
            SortColumn.WinRate => isAscending ? query.OrderBy(d => d.WinRate) : query.OrderByDescending(d => d.WinRate),
            SortColumn.FirstPlayerWinRate => isAscending ? query.OrderBy(d => d.FirstPlayerWinRate) : query.OrderByDescending(d => d.FirstPlayerWinRate),
            SortColumn.GoingSecondWinRate => isAscending ? query.OrderBy(d => d.GoingSecondWinRate) : query.OrderByDescending(d => d.GoingSecondWinRate),
            SortColumn.LastPlayed => isAscending ? query.OrderBy(d => d.LastPlayed ?? DateTime.MinValue) : query.OrderByDescending(d => d.LastPlayed ?? DateTime.MinValue),
            _ => query.OrderByDescending(d => d.WinRate).ThenByDescending(d => d.TotalPlays)
        };

        return sortedDeckStats.ToList();
    }

    private enum SortColumn
    {
        DeckName,
        Plays,
        Wins,
        Losses,
        WinRate,
        FirstPlayerWinRate,
        GoingSecondWinRate,
        LastPlayed
    }

    private class DeckStats
    {
        public string DeckName { get; set; } = string.Empty;
        public int TotalPlays { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public int FirstPlayerPlays { get; set; }
        public int FirstPlayerWins { get; set; }
        public int GoingSecondPlays { get; set; }
        public int GoingSecondWins { get; set; }
        public DateTime? LastPlayed { get; set; }
        
        public double WinRate => TotalPlays > 0 ? (double)Wins / TotalPlays : 0;
        public double FirstPlayerWinRate => FirstPlayerPlays > 0 ? (double)FirstPlayerWins / FirstPlayerPlays : 0;
        public double GoingSecondWinRate => GoingSecondPlays > 0 ? (double)GoingSecondWins / GoingSecondPlays : 0;
    }
} 