@page "/decks"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService
@inject IGlobalFilterService GlobalFilterService

<PageTitle>Magic Deck Stats - Decks</PageTitle>

<div class="container mt-2 mt-md-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h1><i class="bi bi-stack me-4 d-none d-md-inline"></i>Decks</h1>
        <div class="text-muted mt-1 mt-md-0">
            Showing @deckStats.Count decks
        </div>
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin me-2"></i>Loading deck statistics...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i>@errorMessage
        </div>
    }
    else if (!deckStats.Any())
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>No decks found.
        </div>
    }
    else
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-funnel me-2"></i>Filters</h5>
            </div>
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-12">
                        <label for="minGamesFilter" class="form-label fw-bold">
                            Minimum Games Played: @minGamesFilter
                        </label>
                        <input type="range"
                               class="form-range"
                               id="minGamesFilter"
                               value="@minGamesFilter"
                               @oninput="@((ChangeEventArgs e) => { minGamesFilter = int.Parse(e.Value?.ToString() ?? DEFAULT_MIN_GAMES_FILTER.ToString()); OnMinGamesFilterChanged(); })"
                               min="1"
                               max="50"
                               step="1" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="includeNotOwned" @bind="includeNotOwnedDecks" />
                            <label class="form-check-label" for="includeNotOwned">
                                Include not owned decks
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="includeArchived" @bind="includeArchivedDecks" />
                            <label class="form-check-label" for="includeArchived">
                                Include archived decks
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="hideLabels" @bind="hideLabels" />
                            <label class="form-check-label" for="hideLabels">
                                Hide labels
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-2">
                        <button class="btn btn-secondary w-100"
                                @onclick="ClearMinGamesFilter"
                                disabled="@(minGamesFilter == DEFAULT_MIN_GAMES_FILTER && !includeNotOwnedDecks && !includeArchivedDecks)">
                            <i class="bi bi-arrow-clockwise me-1"></i> Reset
                        </button>
                    </div>
                    <div class="col-md-10 d-flex align-items-center">
                        <span class="text-muted">
                            Showing @FilteredDeckStats.Count out of @deckStats.Count decks (@(deckStats.Count - FilteredDeckStats.Count) hidden)
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.DeckName)">
                                        Name
                                        @if (currentSortColumn == SortColumn.DeckName)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Plays)">
                                        Plays
                                        @if (currentSortColumn == SortColumn.Plays)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.WinRate)">
                                        Win Rate
                                        @if (currentSortColumn == SortColumn.WinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Wins)">
                                        Wins
                                        @if (currentSortColumn == SortColumn.Wins)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Losses)">
                                        Losses
                                        @if (currentSortColumn == SortColumn.Losses)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.FirstPlayerWinRate)">
                                        <i class="bi bi-1-square me-1"></i> Player Win
                                        @if (currentSortColumn == SortColumn.FirstPlayerWinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.GoingSecondWinRate)">
                                        <i class="bi bi-2-square me-1"></i> Player Win
                                        @if (currentSortColumn == SortColumn.GoingSecondWinRate)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.LastPlayed)" style="white-space: nowrap;">
                                        Last Played
                                        @if (currentSortColumn == SortColumn.LastPlayed)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var deck in GetSortedDeckStats())
                            {
                                var winRateColor = Utilities.GetWinRateColorForDeck(deck.WinRate);

                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <NavLink class="deck-link" href="@Utilities.GetDeckUrl(deck.DeckName)">@deck.DeckName</NavLink>
                                            @if (!hideLabels)
                                            {
                                                <TagBadges Tags="@Utilities.GetDeckTags(deck.DeckName)" ContainerClass="ms-2" />
                                            }
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        @deck.TotalPlays
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold @winRateColor">@Utilities.FormatWinRate(deck.WinRate)</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="text-success fw-bold">@deck.Wins</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="text-danger">@deck.Losses</span>
                                    </td>
                                    <td class="text-center">
                                        @if (deck.FirstPlayerPlays > 0)
                                        {
                                            var firstPlayerColor = Utilities.GetWinRateColorForDeck(deck.FirstPlayerWinRate);
                                            <span class="fw-bold @firstPlayerColor">@Utilities.FormatWinRate(deck.FirstPlayerWinRate)</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (deck.GoingSecondPlays > 0)
                                        {
                                            var goingSecondColor = Utilities.GetWinRateColorForDeck(deck.GoingSecondWinRate);
                                            <span class="fw-bold @goingSecondColor">@Utilities.FormatWinRate(deck.GoingSecondWinRate)</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (deck.LastPlayed.HasValue)
                                        {
                                            <span class="text-muted">@deck.LastPlayed.Value.ToString("yyyy-MM-dd")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-bar-chart me-2"></i>Win Rate Chart
                    </h5>
                    <div class="btn-group" role="group">
                        <button type="button"
                                class="btn @(chartOrientation == ChartOrientation.Horizontal ? "btn-primary" : "btn-outline-primary") btn-sm"
                                @onclick="@(() => SetChartOrientation(ChartOrientation.Horizontal))">
                            Horizontal
                        </button>

                        <button type="button"
                                class="btn @(chartOrientation == ChartOrientation.Vertical ? "btn-primary" : "btn-outline-primary") btn-sm"
                                @onclick="@(() => SetChartOrientation(ChartOrientation.Vertical))">
                            Vertical
                        </button>


                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (chartOrientation == ChartOrientation.Horizontal)
                {
                    <ApexChart TItem="DeckStats" Options="@horizontalChartOptions" @key="chartRenderKey">
                        <ApexPointSeries TItem="DeckStats"
                                         Items="@chartDeckStats"
                                         Name="Win Rate"
                                         SeriesType="SeriesType.Bar"
                                         XValue="e => e.DeckName"
                                         YValue="e => (decimal)(e.TotalPlays > 0 ? (int)((double)e.Wins / e.TotalPlays * 100) : 0)"
                                         PointColor="deck => GetBarColor(deck)" />
                    </ApexChart>
                }
                else
                {
                    <ApexChart TItem="DeckStats" Options="@verticalChartOptions" @key="chartRenderKey">
                        <ApexPointSeries TItem="DeckStats"
                                         Items="@chartDeckStats"
                                         Name="Win Rate"
                                         SeriesType="SeriesType.Bar"
                                         XValue="e => e.DeckName"
                                         YValue="e => (decimal)(e.TotalPlays > 0 ? (int)((double)e.Wins / e.TotalPlays * 100) : 0)"
                                         PointColor="deck => GetBarColor(deck)" />
                    </ApexChart>
                }
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-bar-chart me-2"></i>Played Games
                </h5>
            </div>
            <div class="card-body">
                <ApexChart TItem="DeckStats" Options="@playedGamesChartOptions" @key="chartRenderKey">
                    <ApexPointSeries TItem="DeckStats"
                                     Items="@chartPlayedGamesDeckStats"
                                     Name="Wins"
                                     SeriesType="SeriesType.Bar"
                                     XValue="e => e.DeckName"
                                     YValue="e => e.Wins"
                                     PointColor="@(deck => "#198754")"
                                     ShowDataLabels />
                    <ApexPointSeries TItem="DeckStats"
                                     Items="@chartPlayedGamesDeckStats"
                                     Name="Losses"
                                     SeriesType="SeriesType.Bar"
                                     XValue="e => e.DeckName"
                                     YValue="e => e.Losses"
                                     PointColor="@(deck => "#dc3545")"
                                     ShowDataLabels />
                </ApexChart>
            </div>
        </div>
    }
</div>

@code {
    private const int DEFAULT_MIN_GAMES_FILTER = 15;

    private bool isLoading = true;
    private string? errorMessage;
    private List<DeckStats> deckStats = new();
    private SortColumn currentSortColumn = SortColumn.WinRate;
    private bool isAscending = false;
    private ApexChartOptions<DeckStats> horizontalChartOptions = new();
    private ApexChartOptions<DeckStats> verticalChartOptions = new();
    private int minGamesFilter = DEFAULT_MIN_GAMES_FILTER;
    private bool _includeNotOwnedDecks;
    private bool includeNotOwnedDecks
    {
        get => _includeNotOwnedDecks;
        set
        {
            if (_includeNotOwnedDecks != value)
            {
                _includeNotOwnedDecks = value;
                OnMinGamesFilterChanged();
            }
        }
    }
    private bool _includeArchivedDecks;
    private bool includeArchivedDecks
    {
        get => _includeArchivedDecks;
        set
        {
            if (_includeArchivedDecks != value)
            {
                _includeArchivedDecks = value;
                OnMinGamesFilterChanged();
            }
        }
    }
    private bool _hideLabels;
    private bool hideLabels
    {
        get => _hideLabels;
        set
        {
            if (_hideLabels != value)
            {
                _hideLabels = value;
                OnMinGamesFilterChanged();
            }
        }
    }
    private ChartOrientation chartOrientation = ChartOrientation.Horizontal;
    private List<DeckStats> FilteredDeckStats => deckStats.Where(d =>
        d.TotalPlays >= minGamesFilter &&
        ShouldIncludeDeck(d.DeckName)).ToList();
    private ApexChartOptions<DeckStats> playedGamesChartOptions = new();
    private List<DeckStats> chartDeckStats = new();
    private List<DeckStats> chartPlayedGamesDeckStats = new();
    private int chartRenderKey = 0;

    protected override void OnInitialized()
    {
        GlobalFilterService.OnFilterChanged += OnFilterChanged;
    }

    public void Dispose()
    {
        GlobalFilterService.OnFilterChanged -= OnFilterChanged;
    }

    private async void OnFilterChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadData();
            UpdateChartData();
            StateHasChanged();
        });
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            var plays = await BGStatsService.GetMagicPlaysAsync(GlobalFilterService.SelectedVariants);

            var deckGroups = plays
                .SelectMany(p => p.PlayerScores)
                .GroupBy(ps => ps.Deck)
                .Where(g => !string.IsNullOrWhiteSpace(g.Key));

            deckStats = deckGroups.Select(g => new DeckStats
            {
                DeckName = g.Key,
                TotalPlays = g.Count(),
                Wins = g.Count(ps => ps.IsWinner),
                Losses = g.Count(ps => !ps.IsWinner),
                FirstPlayerPlays = g.Count(ps => ps.IsFirstPlayer),
                FirstPlayerWins = g.Count(ps => ps.IsFirstPlayer && ps.IsWinner),
                GoingSecondPlays = g.Count(ps => !ps.IsFirstPlayer),
                GoingSecondWins = g.Count(ps => !ps.IsFirstPlayer && ps.IsWinner),
                LastPlayed = g.Max(ps => DateTime.Parse(plays.First(p => p.PlayerScores.Contains(ps)).Date))
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        UpdateChartData();
        ConfigureHorizontalChartOptions();
        ConfigureVerticalChartOptions();
        ConfigurePlayedGamesChartOptions();
    }

    private void SortBy(SortColumn column)
    {
        if (column == currentSortColumn)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = false;
        }
    }

    private List<DeckStats> GetSortedDeckStats()
    {
        var query = currentSortColumn switch
        {
            SortColumn.DeckName => FilteredDeckStats.AsQueryable(),
            SortColumn.Plays => FilteredDeckStats.AsQueryable(),
            SortColumn.Wins => FilteredDeckStats.AsQueryable(),
            SortColumn.Losses => FilteredDeckStats.AsQueryable(),
            SortColumn.WinRate => FilteredDeckStats.AsQueryable(),
            SortColumn.FirstPlayerWinRate => FilteredDeckStats.AsQueryable(),
            SortColumn.GoingSecondWinRate => FilteredDeckStats.AsQueryable(),
            SortColumn.LastPlayed => FilteredDeckStats.AsQueryable(),
            _ => FilteredDeckStats.AsQueryable()
        };

        var sortedDeckStats = currentSortColumn switch
        {
            SortColumn.DeckName => isAscending ? query.OrderBy(d => d.DeckName) : query.OrderByDescending(d => d.DeckName),
            SortColumn.Plays => isAscending ? query.OrderBy(d => d.TotalPlays) : query.OrderByDescending(d => d.TotalPlays),
            SortColumn.Wins => isAscending ? query.OrderBy(d => d.Wins) : query.OrderByDescending(d => d.Wins),
            SortColumn.Losses => isAscending ? query.OrderBy(d => d.Losses) : query.OrderByDescending(d => d.Losses),
            SortColumn.WinRate => isAscending ? query.OrderBy(d => d.WinRate) : query.OrderByDescending(d => d.WinRate),
            SortColumn.FirstPlayerWinRate => isAscending ? query.OrderBy(d => d.FirstPlayerWinRate) : query.OrderByDescending(d => d.FirstPlayerWinRate),
            SortColumn.GoingSecondWinRate => isAscending ? query.OrderBy(d => d.GoingSecondWinRate) : query.OrderByDescending(d => d.GoingSecondWinRate),
            SortColumn.LastPlayed => isAscending ? query.OrderBy(d => d.LastPlayed ?? DateTime.MinValue) : query.OrderByDescending(d => d.LastPlayed ?? DateTime.MinValue),
            _ => query.OrderByDescending(d => d.WinRate).ThenByDescending(d => d.TotalPlays)
        };

        return sortedDeckStats.ToList();
    }

    private void ConfigureHorizontalChartOptions()
    {
        horizontalChartOptions = new ApexChartOptions<DeckStats>
        {
            Chart = new Chart { FontFamily = "Roboto Condensed" },
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = true,
                    BarHeight = "80%",
                    BorderRadius = 5,
                    BorderRadiusApplication = BorderRadiusApplication.End
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(val) { return (val).toFixed(1) + '%'; }"
                }
            },
            Grid = new Grid
            {
                Xaxis = new GridXAxis
                {
                    Lines = new Lines()
                    {
                        Show = true,
                    },
                }
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        FontSize = "16px"
                    }
                }
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis
                {
                    
                    Labels = new YAxisLabels
                    {
                        MaxWidth = 400,
                        Style = new AxisLabelStyle
                        {
                            FontSize = "16px"
                        }
                    }
                }
            }
        };
    }

    private void ConfigureVerticalChartOptions()
    {
        verticalChartOptions = new ApexChartOptions<DeckStats>
        {
            Chart = new Chart { FontFamily = "Roboto Condensed" },
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = false,
                    BorderRadius = 5,
                    BorderRadiusApplication = BorderRadiusApplication.End
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(val) { return (val).toFixed(1) + '%'; }"
                }
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        FontSize = "16px"
                    }
                }
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        MaxWidth = 400,
                        Style = new AxisLabelStyle
                        {
                            FontSize = "16px"
                        }
                    }
                }
            }
        };
    }

    private void ConfigurePlayedGamesChartOptions()
    {
        playedGamesChartOptions = new ApexChartOptions<DeckStats>
        {
            Chart = new Chart { Stacked = true, FontFamily = "Roboto Condensed" },
            Legend = new Legend { Show = false },
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = true,
                    BarHeight = "70%",

                    DataLabels = new PlotOptionsBarDataLabels
                    {
                        Position = BarDataLabelPosition.Center,
                        Total = new BarTotalDataLabels
                        {
                            OffsetX = 5
                        }
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(val) { return val; }"
                }
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        FontSize = "16px"
                    }
                }
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        MaxWidth = 400,
                        Style = new AxisLabelStyle
                        {
                            FontSize = "16px"
                        }
                    }
                }
            }
        };
    }

    private string GetBarColor(DeckStats deck)
    {
        var winRate = deck.TotalPlays > 0 ? (double)deck.Wins / deck.TotalPlays * 100 : 0;
        if (winRate >= 80) return "#3d0a91";
        else if (winRate >= 70) return "#0a58ca";
        else if (winRate >= 60) return "#0d5a2c";
        else if (winRate >= 45) return "#198754";
        else if (winRate >= 40) return "#ffc107";
        else if (winRate >= 35) return "#fd7e14";
        else if (winRate >= 20) return "#dc3545";
        else return "#842029";
    }

    private void OnMinGamesFilterChanged()
    {
        UpdateChartData();
        StateHasChanged();
    }

    private void ClearMinGamesFilter()
    {
        minGamesFilter = DEFAULT_MIN_GAMES_FILTER;
        includeNotOwnedDecks = false;
        includeArchivedDecks = false;
        hideLabels = false;
        UpdateChartData();
        StateHasChanged();
    }

    private bool ShouldIncludeDeck(string deckName)
    {
        var tags = Utilities.GetDeckTags(deckName);

        if (tags.Contains("Not Owned") && !includeNotOwnedDecks) return false;
        if (tags.Contains("Archived") && !includeArchivedDecks) return false;

        return true;
    }

    private void SetChartOrientation(ChartOrientation orientation)
    {
        chartOrientation = orientation;
        ConfigureHorizontalChartOptions();
        ConfigureVerticalChartOptions();
        ConfigurePlayedGamesChartOptions();
        UpdateChartData();
        StateHasChanged();
    }

    private enum ChartOrientation
    {
        Horizontal,
        Vertical
    }

    private enum SortColumn
    {
        DeckName,
        Plays,
        Wins,
        Losses,
        WinRate,
        FirstPlayerWinRate,
        GoingSecondWinRate,
        LastPlayed
    }

    private List<DeckStats> GetSortedByPlayedGamesDeckStats()
    {
        return FilteredDeckStats.OrderByDescending(d => d.Wins + d.Losses).ToList();
    }

    private void UpdateChartData()
    {
        chartDeckStats = GetSortedDeckStats();
        chartPlayedGamesDeckStats = GetSortedByPlayedGamesDeckStats();
        chartRenderKey++;
    }

    private class DeckStats
    {
        public string DeckName { get; set; } = string.Empty;
        public int TotalPlays { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public int FirstPlayerPlays { get; set; }
        public int FirstPlayerWins { get; set; }
        public int GoingSecondPlays { get; set; }
        public int GoingSecondWins { get; set; }
        public DateTime? LastPlayed { get; set; }

        public double WinRate => TotalPlays > 0 ? (double)Wins / TotalPlays : 0;
        public double FirstPlayerWinRate => FirstPlayerPlays > 0 ? (double)FirstPlayerWins / FirstPlayerPlays : 0;
        public double GoingSecondWinRate => GoingSecondPlays > 0 ? (double)GoingSecondWins / GoingSecondPlays : 0;
    }
}