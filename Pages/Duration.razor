@page "/duration"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService
@inject IGlobalFilterService GlobalFilterService

<PageTitle>Magic Deck Stats - Duration</PageTitle>

<div class="container mt-2 mt-md-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h1><i class="bi bi-clock me-4 d-none d-md-inline"></i>Duration</h1>
        <div class="text-muted mt-1 mt-md-0">
            Showing @deckStats.Count decks
        </div>
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin"></i>Loading deck duration statistics...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i>@errorMessage
        </div>
    }
    else if (!deckStats.Any())
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>No decks found.
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up"></i>Quick Stats
                        </h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Average Duration:</strong> @(deckStats.Any() ? deckStats.Average(d => d.AverageDuration).ToString("F1") : "0") minutes</p>
                        <hr />
                        @{
                            var fastestDeck = deckStats.OrderBy(d => d.AverageDuration).FirstOrDefault();
                            var slowestDeck = deckStats.OrderByDescending(d => d.AverageDuration).FirstOrDefault();
                            var fastestWinDeck = deckStats.Where(d => d.Wins > 0).OrderBy(d => d.WinDuration).FirstOrDefault();
                            var slowestWinDeck = deckStats.Where(d => d.Wins > 0).OrderByDescending(d => d.WinDuration).FirstOrDefault();
                        }
                        @if (fastestDeck != null)
                        {
                            <p><strong>Fastest Deck:</strong> <NavLink class="deck-link" href="@Utilities.GetDeckUrl(fastestDeck.DeckName)">@fastestDeck.DeckName</NavLink> (@(fastestDeck.AverageDuration.ToString("F1")) min)</p>
                        }
                        @if (slowestDeck != null)
                        {
                            <p><strong>Slowest Deck:</strong> <NavLink class="deck-link" href="@Utilities.GetDeckUrl(slowestDeck.DeckName)">@slowestDeck.DeckName</NavLink> (@(slowestDeck.AverageDuration.ToString("F1")) min)</p>
                        }
                        <hr />
                        @if (fastestWinDeck != null)
                        {
                            <p><strong>Fastest Deck When Winning:</strong> <NavLink class="deck-link" href="@Utilities.GetDeckUrl(fastestWinDeck.DeckName)">@fastestWinDeck.DeckName</NavLink> (@(fastestWinDeck.WinDuration.ToString("F1")) min)</p>
                        }
                        @if (slowestWinDeck != null)
                        {
                            <p><strong>Slowest Deck When Winning:</strong> <NavLink class="deck-link" href="@Utilities.GetDeckUrl(slowestWinDeck.DeckName)">@slowestWinDeck.DeckName</NavLink> (@(slowestWinDeck.WinDuration.ToString("F1")) min)</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.DeckName)">
                                        Deck
                                        @if (currentSortColumn == SortColumn.DeckName)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Duration)">
                                        Duration (min)
                                        @if (currentSortColumn == SortColumn.Duration)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Plays)">
                                        Plays
                                        @if (currentSortColumn == SortColumn.Plays)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Wins)">
                                        Wins
                                        @if (currentSortColumn == SortColumn.Wins)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.WinDuration)">
                                        Win Duration (min)
                                        @if (currentSortColumn == SortColumn.WinDuration)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.Losses)">
                                        Losses
                                        @if (currentSortColumn == SortColumn.Losses)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortBy(SortColumn.LossDuration)">
                                        Loss Duration (min)
                                        @if (currentSortColumn == SortColumn.LossDuration)
                                        {
                                            <i class="bi @(isAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var deck in GetSortedDeckStats())
                            {
                                var durationColor = deck.AverageDuration >= 120 ? "text-danger" :
                                deck.AverageDuration >= 90 ? "text-warning" : "text-success";

                                <tr>
                                    <td>
                                        <NavLink class="deck-link" href="@Utilities.GetDeckUrl(deck.DeckName)">@deck.DeckName</NavLink>
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold @durationColor">@(deck.AverageDuration.ToString("F1"))</span>
                                    </td>
                                    <td class="text-center">
                                        <span>@deck.TotalPlays</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="text-success">@deck.Wins</span>
                                    </td>
                                    <td class="text-center">
                                        @if (deck.Wins > 0)
                                        {
                                            <span class="fw-bold text-success">@(deck.WinDuration.ToString("F1"))</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <span class="text-danger">@deck.Losses</span>
                                    </td>
                                    <td class="text-center">
                                        @if (deck.Losses > 0)
                                        {
                                            <span class="fw-bold text-danger">@(deck.LossDuration.ToString("F1"))</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-bar-chart me-2"></i>Average Duration
                </h5>
            </div>
            <div class="card-body">
                <ApexChart TItem="DeckStats">
                    <ApexPointSeries TItem="DeckStats"
                                     Items="GetSortedDeckStats()"
                                     Name="Duration (min)"
                                     SeriesType="SeriesType.Bar"
                                     XValue="e => e.DeckName"
                                     YValue="e => (decimal)(int)e.AverageDuration" />
                </ApexChart>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-people me-2"></i>Player Duration
                </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortPlayerStatsBy(PlayerSortColumn.PlayerName)">
                                        Player
                                        @if (currentPlayerSortColumn == PlayerSortColumn.PlayerName)
                                        {
                                            <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortPlayerStatsBy(PlayerSortColumn.TotalGames)">
                                        Total Games
                                        @if (currentPlayerSortColumn == PlayerSortColumn.TotalGames)
                                        {
                                            <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortPlayerStatsBy(PlayerSortColumn.AverageDuration)">
                                        Avg Duration (min)
                                        @if (currentPlayerSortColumn == PlayerSortColumn.AverageDuration)
                                        {
                                            <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortPlayerStatsBy(PlayerSortColumn.WinDuration)">
                                        Win Duration (min)
                                        @if (currentPlayerSortColumn == PlayerSortColumn.WinDuration)
                                        {
                                            <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                                <th class="text-center">
                                    <button class="btn btn-link text-decoration-none p-0 fw-bold" @onclick="() => SortPlayerStatsBy(PlayerSortColumn.LossDuration)">
                                        Loss Duration (min)
                                        @if (currentPlayerSortColumn == PlayerSortColumn.LossDuration)
                                        {
                                            <i class="bi @(isPlayerSortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort text-muted"></i>
                                        }
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var player in GetSortedPlayerStats())
                            {
                                <tr>
                                    <td>
                                        <NavLink class="deck-link" href="@Utilities.GetPlayerUrl(player.PlayerId)">@player.PlayerName</NavLink>
                                    </td>
                                    <td class="text-center">
                                        <span>@player.TotalGames</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold @GetDurationColor(player.AverageDuration)">@(player.AverageDuration.ToString("F1"))</span>
                                    </td>
                                    <td class="text-center">
                                        @if (player.Wins > 0)
                                        {
                                            <span class="fw-bold @GetDurationColor(player.WinDuration)">@(player.WinDuration.ToString("F1"))</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (player.Losses > 0)
                                        {
                                            <span class="fw-bold @GetDurationColor(player.LossDuration)">@(player.LossDuration.ToString("F1"))</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<DeckStats> deckStats = new();
    private List<PlayerStats> playerStats = new();
    private SortColumn currentSortColumn = SortColumn.Duration;
    private bool isAscending = true;
    private PlayerSortColumn currentPlayerSortColumn = PlayerSortColumn.AverageDuration;
    private bool isPlayerSortAscending = true;

    protected override void OnInitialized()
    {
        GlobalFilterService.OnFilterChanged += OnFilterChanged;
    }

    public void Dispose()
    {
        GlobalFilterService.OnFilterChanged -= OnFilterChanged;
    }

    private async void OnFilterChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();
        });
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            var plays = await BGStatsService.GetMagicPlaysAsync(GlobalFilterService.SelectedVariants);

            // Calculate deck statistics with duration
            var deckGroups = plays
                .SelectMany(p => p.PlayerScores.Select(ps => new { Play = p, PlayerScore = ps }))
                .GroupBy(x => x.PlayerScore.Deck)
                .Where(g => !string.IsNullOrWhiteSpace(g.Key));

            deckStats = deckGroups.Select(g => new DeckStats
            {
                DeckName = g.Key,
                TotalPlays = g.Count(),
                Wins = g.Count(x => x.PlayerScore.IsWinner),
                Losses = g.Count(x => !x.PlayerScore.IsWinner),
                AverageDuration = g.Average(x => x.Play.DurationInMinutes),
                WinDuration = g.Where(x => x.PlayerScore.IsWinner).Any() ? 
                             g.Where(x => x.PlayerScore.IsWinner).Average(x => x.Play.DurationInMinutes) : 0,
                LossDuration = g.Where(x => !x.PlayerScore.IsWinner).Any() ? 
                             g.Where(x => !x.PlayerScore.IsWinner).Average(x => x.Play.DurationInMinutes) : 0
            }).ToList();

            // Calculate player statistics with duration
            var playerGroups = plays
                .SelectMany(p => p.PlayerScores.Select(ps => new { Play = p, PlayerScore = ps }))
                .GroupBy(x => new { x.PlayerScore.PlayerRefId, x.PlayerScore.PlayerName })
                .Where(g => !string.IsNullOrWhiteSpace(g.Key.PlayerName));

            playerStats = playerGroups.Select(g => new PlayerStats
            {
                PlayerId = g.Key.PlayerRefId,
                PlayerName = g.Key.PlayerName,
                TotalGames = g.Count(),
                Wins = g.Count(x => x.PlayerScore.IsWinner),
                Losses = g.Count(x => !x.PlayerScore.IsWinner),
                AverageDuration = g.Average(x => x.Play.DurationInMinutes),
                WinDuration = g.Where(x => x.PlayerScore.IsWinner).Any() ? 
                             g.Where(x => x.PlayerScore.IsWinner).Average(x => x.Play.DurationInMinutes) : 0,
                LossDuration = g.Where(x => !x.PlayerScore.IsWinner).Any() ? 
                             g.Where(x => !x.PlayerScore.IsWinner).Average(x => x.Play.DurationInMinutes) : 0
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private void SortBy(SortColumn column)
    {
        if (column == currentSortColumn)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }
    }

    private List<DeckStats> GetSortedDeckStats()
    {
        var query = deckStats.AsQueryable();

        var sortedDeckStats = currentSortColumn switch
        {
            SortColumn.DeckName => isAscending ? query.OrderBy(d => d.DeckName) : query.OrderByDescending(d => d.DeckName),
            SortColumn.Duration => isAscending ? query.OrderBy(d => d.AverageDuration) : query.OrderByDescending(d => d.AverageDuration),
            SortColumn.Plays => isAscending ? query.OrderBy(d => d.TotalPlays) : query.OrderByDescending(d => d.TotalPlays),
            SortColumn.Wins => isAscending ? query.OrderBy(d => d.Wins) : query.OrderByDescending(d => d.Wins),
            SortColumn.Losses => isAscending ? query.OrderBy(d => d.Losses) : query.OrderByDescending(d => d.Losses),
            SortColumn.WinDuration => isAscending ? query.OrderBy(d => d.WinDuration) : query.OrderByDescending(d => d.WinDuration),
            SortColumn.LossDuration => isAscending ? query.OrderBy(d => d.LossDuration) : query.OrderByDescending(d => d.LossDuration),
            _ => query.OrderBy(d => d.AverageDuration)
        };

        return sortedDeckStats.ToList();
    }

    private void SortPlayerStatsBy(PlayerSortColumn column)
    {
        if (column == currentPlayerSortColumn)
        {
            isPlayerSortAscending = !isPlayerSortAscending;
        }
        else
        {
            currentPlayerSortColumn = column;
            isPlayerSortAscending = true;
        }
    }

    private List<PlayerStats> GetSortedPlayerStats()
    {
        var query = playerStats.AsQueryable();

        var sortedPlayerStats = currentPlayerSortColumn switch
        {
            PlayerSortColumn.PlayerName => isPlayerSortAscending ? query.OrderBy(p => p.PlayerName) : query.OrderByDescending(p => p.PlayerName),
            PlayerSortColumn.TotalGames => isPlayerSortAscending ? query.OrderBy(p => p.TotalGames) : query.OrderByDescending(p => p.TotalGames),
            PlayerSortColumn.AverageDuration => isPlayerSortAscending ? query.OrderBy(p => p.AverageDuration) : query.OrderByDescending(p => p.AverageDuration),
            PlayerSortColumn.WinDuration => isPlayerSortAscending ? query.OrderBy(p => p.WinDuration) : query.OrderByDescending(p => p.WinDuration),
            PlayerSortColumn.LossDuration => isPlayerSortAscending ? query.OrderBy(p => p.LossDuration) : query.OrderByDescending(p => p.LossDuration),
            _ => query.OrderBy(p => p.PlayerName)
        };

        return sortedPlayerStats.ToList();
    }

    private string GetDurationColor(double duration)
    {
        return duration <= 15 ? "text-success" :
               duration <= 20 ? "text-warning" : "text-danger";
    }

    private enum SortColumn
    {
        DeckName,
        Duration,
        Plays,
        Wins,
        Losses,
        WinDuration,
        LossDuration
    }

    private enum PlayerSortColumn
    {
        PlayerName,
        TotalGames,
        AverageDuration,
        WinDuration,
        LossDuration
    }

    private class DeckStats
    {
        public string DeckName { get; set; } = string.Empty;
        public int TotalPlays { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public double AverageDuration { get; set; }
        public double WinDuration { get; set; }
        public double LossDuration { get; set; }

        public double WinRate => TotalPlays > 0 ? (double)Wins / TotalPlays : 0;
    }

    private class PlayerStats
    {
        public int PlayerId { get; set; }
        public string PlayerName { get; set; } = string.Empty;
        public int TotalGames { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public double AverageDuration { get; set; }
        public double WinDuration { get; set; }
        public double LossDuration { get; set; }

        public double WinRate => TotalGames > 0 ? (double)Wins / TotalGames : 0;
    }
}