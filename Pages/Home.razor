@page "/"
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService

<PageTitle>Magic Deck Stats - Home</PageTitle>

<div class="container mt-4">
    <h1>Magic Deck Stats</h1>
    
    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin"></i> Loading Magic: The Gathering data...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle"></i> Game Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Magic: The Gathering Game ID:</strong> @(magicGameId?.ToString() ?? "Not found")</p>
                        <p><strong>Total Plays Found:</strong> @magicPlays.Count</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up"></i> Quick Stats
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (magicPlays.Any())
                        {
                            <p><strong>Date Range:</strong> @magicPlays.Min(p => p.PlayDate).ToShortDateString() - @magicPlays.Max(p => p.PlayDate).ToShortDateString()</p>
                            <p><strong>Average Duration:</strong> @magicPlays.Average(p => p.Duration).ToString("F1") minutes</p>
                            <p><strong>Total Play Time:</strong> @magicPlays.Sum(p => p.Duration) minutes</p>
                        }
                        else
                        {
                            <p class="text-muted">No plays found</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (magicPlays.Any())
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-list-ul"></i> Recent Magic: The Gathering Plays
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Duration</th>
                                    <th>Board</th>
                                    <th>Players</th>
                                    <th>Winner</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var play in magicPlays.OrderByDescending(p => p.PlayDate).Take(10))
                                {
                                    <tr>
                                        <td>@play.PlayDate.ToShortDateString()</td>
                                        <td>@play.Duration min</td>
                                        <td>@play.Deck</td>
                                        <td>@string.Join(", ", play.PlayerScores.Select(p => p.PlayerName))</td>
                                        <td>
                                            @{
                                                var winner = play.PlayerScores.FirstOrDefault(p => p.IsWinner);
                                                if (winner != null)
                                                {
                                                    <span class="badge bg-success">@winner.PlayerName (@winner.Deck)</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No winner</span>
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-trophy"></i> Top Players by Games Played
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Rank</th>
                                    <th>Player Name</th>
                                    <th>Games Played</th>
                                    <th>Wins</th>
                                    <th>Win Rate</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var playerStats = magicPlays
                                        .SelectMany(p => p.PlayerScores)
                                        .GroupBy(ps => ps.PlayerName)
                                        .Select(g => new
                                        {
                                            PlayerName = g.Key,
                                            GamesPlayed = g.Count(),
                                            Wins = g.Count(ps => ps.IsWinner),
                                            WinRate = g.Count(ps => ps.IsWinner) * 100.0 / g.Count()
                                        })
                                        .OrderByDescending(p => p.GamesPlayed)
                                        .Take(5)
                                        .ToList();

                                    for (int i = 0; i < playerStats.Count; i++)
                                    {
                                        var player = playerStats[i];
                                        <tr>
                                            <td>
                                                @if (i == 0)
                                                {
                                                    <span class="badge bg-warning">🥇</span>
                                                }
                                                else if (i == 1)
                                                {
                                                    <span class="badge bg-secondary">🥈</span>
                                                }
                                                else if (i == 2)
                                                {
                                                    <span class="badge bg-warning text-dark">🥉</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">@(i + 1)</span>
                                                }
                                            </td>
                                            <td><strong>@player.PlayerName</strong></td>
                                            <td>@player.GamesPlayed</td>
                                            <td>@player.Wins</td>
                                            <td>@player.WinRate.ToString("F1")%</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private int? magicGameId;
    private List<MagicPlay> magicPlays = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get all Magic plays
            magicPlays = await BGStatsService.GetMagicPlaysAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
