@page "/"
@using MagicDeckStats.Components
@using MagicDeckStats.Services
@using MagicDeckStats.Models
@inject IBGStatsImportService BGStatsService

<PageTitle>Magic Deck Stats</PageTitle>

<div class="container mt-4">
    <h1><i class="bi bi-bar-chart-fill me-3"></i> Magic Deck Stats</h1>
    
    @if (isLoading)
    {
        <div class="alert alert-info">
            <i class="bi bi-arrow-clockwise spin"></i> Loading Magic: The Gathering data...
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-1-square"></i> First Player Win Rate
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (plays.Any())
                        {
                            var firstPlayerWins = plays.Count(p => p.PlayerScores.Any(ps => ps.IsWinner && ps.IsFirstPlayer));
                            var firstPlayerLosses = plays.Count(p => p.PlayerScores.Any(ps => !ps.IsWinner && ps.IsFirstPlayer));
                            var totalPlays = plays.Count;
                            var firstPlayerWinRate = totalPlays > 0 ? (firstPlayerWins * 100.0 / totalPlays) : 0;
                            var firstPlayerLossRate = totalPlays > 0 ? (firstPlayerLosses * 100.0 / totalPlays) : 0;
                            
                            <ApexChart TItem="FirstPlayerStats"
                                       Options="@firstPlayerChartOptions">
                                <ApexPointSeries TItem="FirstPlayerStats"
                                                Items="@firstPlayerStats"
                                                Name="Plays"
                                                SeriesType="SeriesType.Pie"
                                                XValue="@(e => e.Result)"
                                                YValue="@(e => e.Count)"
                                                PointColor="e => GetPointColor(e)"
                                                ShowDataLabels />
                            </ApexChart>
                            
                            <div class="row text-center mt-3">
                                <div class="col-6">
                                    <div class="text-success">
                                        <div class="fw-bold">@firstPlayerWins</div>
                                        <div class="small">Wins</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="text-danger">
                                        <div class="fw-bold">@firstPlayerLosses</div>
                                        <div class="small">Losses</div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No plays found</p>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up"></i> Quick Stats
                        </h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Total Plays:</strong> @plays.Count</p>
                        <p><strong>Total Decks Used:</strong> @(plays.Any() ? plays.SelectMany(p => p.PlayerScores).Select(ps => ps.Deck).Distinct().Count() : 0)</p>
                        <p><strong>Total Players:</strong> @(plays.Any() ? plays.SelectMany(p => p.PlayerScores).Select(ps => ps.PlayerName).Distinct().Count() : 0)</p>
                        <hr />
                        @if (plays.Any())
                        {
                            var longestGame = plays.OrderByDescending(p => p.DurationInMinutes).First();
                            var mostPlayedDeck = plays.SelectMany(p => p.PlayerScores)
                                                     .GroupBy(ps => ps.Deck)
                                                     .OrderByDescending(g => g.Count())
                                                     .First();
                            
                            <p><strong>Average Duration:</strong> @plays.Average(p => p.DurationInMinutes).ToString("F1") minutes</p>
                            <p><strong>Longest Game:</strong> @longestGame.DurationInMinutes minutes</p>
                            <p><strong>Total Play Time:</strong> @Utilities.FormatTotalPlayTime(plays.Sum(p => p.DurationInMinutes))</p>
                            <hr />
                            <p><strong>Most Played Deck:</strong> <NavLink class="deck-link" href="@Utilities.GetDeckUrl(mostPlayedDeck.Key)">@mostPlayedDeck.Key</NavLink> (@mostPlayedDeck.Count() plays)</p>
                        }
                        else
                        {
                            <p class="text-muted">No plays found</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (plays.Any())
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-list-ul"></i> Recent Plays
                    </h5>
                </div>
                <div class="card-body">
                    <PlaysTable Plays="@currentPagePlays" />

                    @if (totalPages > 1)
                    {
                        <nav aria-label="Plays pagination">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                                        <i class="bi bi-chevron-double-left"></i>
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </li>

                                @{
                                    var startPage = Math.Max(1, currentPage - 2);
                                    var endPage = Math.Min(totalPages, currentPage + 2);

                                    if (startPage > 1)
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="() => GoToPage(1)">1</button>
                                        </li>
                                        if (startPage > 2)
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        }
                                    }

                                    for (int i = startPage; i <= endPage; i++)
                                    {
                                        var pageNumber = i;
                                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                        </li>
                                    }

                                    if (endPage < totalPages)
                                    {
                                        if (endPage < totalPages - 1)
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        }
                                        <li class="page-item">
                                            <button class="page-link" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                                        </li>
                                    }
                                }

                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        <i class="bi bi-chevron-double-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-trophy"></i> Top Players by Games Played
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Rank</th>
                                    <th>Player Name</th>
                                    <th>Games Played</th>
                                    <th>Decks played</th>
                                    <th>Wins</th>
                                    <th>Win %</th>
                                    <th>Most Played Deck</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var playerStats = plays
                                        .SelectMany(p => p.PlayerScores)
                                        .GroupBy(ps => ps.PlayerName)
                                        .Select(g => new
                                        {
                                            PlayerName = g.Key,
                                            GamesPlayed = g.Count(),
                                            Wins = g.Count(ps => ps.IsWinner),
                                            WinRate = g.Count(ps => ps.IsWinner) * 100.0 / g.Count(),
                                            UniqueDecks = g.Select(ps => ps.Deck).Distinct().Count(),
                                            FavouriteDeck = g.GroupBy(ps => ps.Deck)
                                                             .OrderByDescending(dg => dg.Count())
                                                             .First().Key
                                        })
                                        .OrderByDescending(p => p.GamesPlayed)
                                        .Take(15)
                                        .ToList();

                                    for (int i = 0; i < playerStats.Count; i++)
                                    {
                                        var player = playerStats[i];
                                        <tr>
                                            <td>
                                                @if (i == 0)
                                                {
                                                    <span class="badge bg-warning">🥇</span>
                                                }
                                                else if (i == 1)
                                                {
                                                    <span class="badge bg-secondary">🥈</span>
                                                }
                                                else if (i == 2)
                                                {
                                                    <span class="badge" style="background-color: #cd7f32; color: white;">🥉</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">@(i + 1)</span>
                                                }
                                            </td>
                                            <td><strong>@player.PlayerName</strong></td>
                                            <td>@player.GamesPlayed</td>
                                            <td>@player.UniqueDecks</td>
                                            <td>@player.Wins</td>
                                            <td>@player.WinRate.ToString("F1")%</td>
                                            <td>
                                                <NavLink class="deck-link" href="@Utilities.GetDeckUrl(player.FavouriteDeck)">@player.FavouriteDeck</NavLink>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<Play> plays = new();
    private ApexChartOptions<FirstPlayerStats> firstPlayerChartOptions = new();
    private List<FirstPlayerStats> firstPlayerStats = new();
    private int currentPage = 1;
    private int totalPages = 1;
    private List<Play> currentPagePlays = new();

    public class FirstPlayerStats
    {
        public string Result { get; set; } = string.Empty;
        public int Count { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get all Magic plays
            plays = await BGStatsService.GetMagicPlaysAsync();
            
            // Sort plays by date (newest first)
            plays = plays.OrderByDescending(p => DateTime.Parse(p.Date)).ToList();
            
            // Initialize pagination
            totalPages = (int)Math.Ceiling((double)plays.Count / 10);
            UpdateCurrentPagePlays();
            
            // Configure chart options
            ConfigureFirstPlayerChart();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ConfigureFirstPlayerChart()
    {
        if (!plays.Any()) return;
        
        var firstPlayerWins = plays.Count(p => p.PlayerScores.Any(ps => ps.IsWinner && ps.IsFirstPlayer));
        var firstPlayerLosses = plays.Count(p => p.PlayerScores.Any(ps => !ps.IsWinner && ps.IsFirstPlayer));
        
        firstPlayerChartOptions = new ApexChartOptions<FirstPlayerStats>
        {
            Chart = new Chart
            {
                Type = ChartType.Pie,
                Height = 300
            },
            Legend = new Legend
            {
                Show = false
            },
            DataLabels = new DataLabels 
            { 
                Style = new DataLabelsStyle
                {
                    FontSize = "14px",
                    FontWeight = "bold"
                }
            },
            Responsive = new List<Responsive<FirstPlayerStats>>
            {
                new Responsive<FirstPlayerStats>
                {
                    Breakpoint = 480,
                    Options = new ApexChartOptions<FirstPlayerStats>
                    {
                        Chart = new Chart { Width = 200 }
                    }
                }
            }
        };

        firstPlayerStats = new List<FirstPlayerStats>
        {
            new FirstPlayerStats { Result = "Losses", Count = firstPlayerLosses },
            new FirstPlayerStats { Result = "Wins", Count = firstPlayerWins }
        };
    }

    private string GetPointColor(FirstPlayerStats stats)
    {
        return stats.Result == "Wins" ? "#28a745" : "#dc3545";
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            UpdateCurrentPagePlays();
        }
    }

    private void UpdateCurrentPagePlays()
    {
        var skip = (currentPage - 1) * 10;
        currentPagePlays = plays.Skip(skip).Take(10).ToList();
    }
}
